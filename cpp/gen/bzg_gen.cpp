//
// cpp/gen/bzg_gen.cpp
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#include "include/algo.h"  // hard-coded include
#include "include/gen/bzg_gen.h"
#include "include/gen/bzg_gen.inl.h"
#include "include/gen/command_gen.h"
#include "include/gen/command_gen.inl.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/algo_gen.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dev_gen.h"
#include "include/gen/dev_gen.inl.h"
#include "include/gen/algo_lib_gen.h"
#include "include/gen/algo_lib_gen.inl.h"
#include "include/gen/lib_json_gen.h"
#include "include/gen/lib_json_gen.inl.h"
#include "include/gen/lib_prot_gen.h"
#include "include/gen/lib_prot_gen.inl.h"
//#pragma endinclude

// Instantiate all libraries linked into this executable,
// in dependency order
algo_lib::FDb   algo_lib::_db;    // dependency found via dev.targdep
lib_json::FDb   lib_json::_db;    // dependency found via dev.targdep
bzg::FDb        bzg::_db;         // dependency found via dev.targdep

namespace bzg {
const char *bzg_help =
"Usage: bzg [options]\n"
"    OPTION      TYPE    DFLT    COMMENT\n"
"    -in         string  \"data\"  Input directory or filename, - for stdin\n"
"    -write\n"
"    -verbose    int             Verbosity level (0..255); alias -v; cumulative\n"
"    -debug      int             Debug level (0..255); alias -d; cumulative\n"
"    -help                       Print help and exit; alias -h\n"
"    -version                    Print version and exit\n"
"    -signature                  Show signatures and exit; alias -sig\n"
;


} // namespace bzg
namespace bzg { // gen:ns_gsymbol
    const dev::OptTypePkey dev_opt_type_AR("AR");
    const dev::OptTypePkey dev_opt_type_C("C");
    const dev::OptTypePkey dev_opt_type_CC("CC");
    const dev::OptTypePkey dev_opt_type_CPP("CPP");
    const dev::OptTypePkey dev_opt_type_HPP("HPP");
    const dev::OptTypePkey dev_opt_type_IGNOREME("IGNOREME");
    const dev::OptTypePkey dev_opt_type_LINK("LINK");
    const dev::OptTypePkey dev_opt_type_RC("RC");
} // gen:ns_gsymbol
namespace bzg { // gen:ns_gsymbol
    const dev::UnamePkey dev_uname_("");
    const dev::UnamePkey dev_uname_Darwin("Darwin");
    const dev::UnamePkey dev_uname_FreeBSD("FreeBSD");
    const dev::UnamePkey dev_uname_Linux("Linux");
    const dev::UnamePkey dev_uname_SunOS("SunOS");
} // gen:ns_gsymbol
namespace bzg { // gen:ns_print_proto
    // Load statically available data into tables, register tables and database.
    // func:bzg.FDb._db.InitReflection
    static void          InitReflection();
    // func:bzg.FDb.targsrc.InputMaybe
    static bool          targsrc_InputMaybe(dev::Targsrc &elem) __attribute__((nothrow));
    // func:bzg.FDb.targdep.InputMaybe
    static bool          targdep_InputMaybe(dev::Targdep &elem) __attribute__((nothrow));
    // func:bzg.FDb.tool_opt.InputMaybe
    static bool          tool_opt_InputMaybe(dev::ToolOpt &elem) __attribute__((nothrow));
    // func:bzg.FDb.ns.InputMaybe
    static bool          ns_InputMaybe(dmmeta::Ns &elem) __attribute__((nothrow));
    // func:bzg.FDb.targsyslib.InputMaybe
    static bool          targsyslib_InputMaybe(dev::Targsyslib &elem) __attribute__((nothrow));
    // find trace by row id (used to implement reflection)
    // func:bzg.FDb.trace.RowidFind
    static algo::ImrowPtr trace_RowidFind(int t) __attribute__((nothrow));
    // Function return 1
    // func:bzg.FDb.trace.N
    inline static i32    trace_N() __attribute__((__warn_unused_result__, nothrow, pure));
    // func:bzg...SizeCheck
    inline static void   SizeCheck();
} // gen:ns_print_proto

// --- bzg.trace..Print
// print string representation of ROW to string STR
// cfmt:bzg.trace.String  printfmt:Tuple
void bzg::trace_Print(bzg::trace& row, algo::cstring& str) {
    algo::tempstr temp;
    str << "bzg.trace";
    (void)row;//only to avoid -Wunused-parameter
}

// --- bzg.FDb._db.ReadArgv
// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     bzg.FDb.cmdline
//     algo_lib.FDb.cmdline
void bzg::ReadArgv() {
    command::bzg &cmd = bzg::_db.cmdline;
    algo_lib::Cmdline &base = algo_lib::_db.cmdline;
    int needarg=-1;// unknown
    int argidx=1;// skip process name
    tempstr err;
    algo::strptr attrname;
    bool isanon=false; // true if attrname is anonfld (positional)
    algo_lib::FieldId baseattrid;
    command::FieldId attrid;
    bool endopt=false;
    int whichns=0;// which namespace does the current attribute belong to
    for (; argidx < algo_lib::_db.argc; argidx++) {
        algo::strptr arg = algo_lib::_db.argv[argidx];
        algo::strptr attrval;
        algo::strptr dfltval;
        bool haveval=false;
        bool dash=elems_N(arg)>1 && arg.elems[0]=='-'; // a single dash is not an option
        // this attribute is a value
        if (endopt || needarg>0 || !dash) {
            attrval=arg;
            haveval=true;
        } else {
            // this attribute is a field name (with - or --)
            // or a -- by itself
            bool dashdash = elems_N(arg) >= 2 && arg.elems[1]=='-';
            int skip = int(dash) + dashdash;
            attrname=ch_RestFrom(arg,skip);
            if (skip==2 && elems_N(arg)==2) {
                endopt=true;
                continue;// nothing else to do here
            }
            // parse "-a:B" arg into attrname,attrvalue
            algo::i32_Range colon = TFind(attrname,':');
            if (colon.beg < colon.end) {
                attrval=ch_RestFrom(attrname,colon.end);
                attrname=ch_FirstN(attrname,colon.beg);
                haveval=true;
            }
            // look up which command (this one or the base) contains the field
            whichns=0;
            needarg=-1;
            // look up parameter information in base namespace (needarg will be -1 if lookup fails)
            if (algo_lib::FieldId_ReadStrptrMaybe(baseattrid,attrname)) {
                needarg = algo_lib::Cmdline_NArgs(baseattrid,dfltval,&isanon);
            }
            if (needarg<0) {
                whichns=1;
                // look up parameter information in this namespace (needarg will be -1 if lookup fails)
                if (command::FieldId_ReadStrptrMaybe(attrid,attrname)) {
                    needarg = command::bzg_NArgs(attrid,dfltval,&isanon);
                }
            }
            if (attrval == "" && dfltval != "") {
                attrval=dfltval;
                haveval=true;
            }
            if (needarg<0) {
                err<<"bzg: unknown option "<<Keyval("value",arg)<<eol;
            } else {
            }
        }
        if (ch_N(attrname) == 0) {
            err << "bzg: too many arguments. error at "<<algo::strptr_ToSsim(arg)<<eol;
        }
        // read value into currently selected arg
        if (haveval) {
            bool ret=false;
            // it's already known which namespace is consuming the args,
            // so directly go there
            if (whichns == 0) {
                ret=algo_lib::Cmdline_ReadFieldMaybe(base, attrname, attrval);
            }
            if (whichns==1) {
                ret=command::bzg_ReadFieldMaybe(cmd, attrname, attrval);
                switch(attrid.value) {
                    default:break;
                }
            }
            if (!ret) {
                err<<"bzg: error in "
                <<Keyval("option",attrname)
                <<Keyval("value",attrval)<<eol;
            }
            needarg--;
            if (needarg <= 0) {
                attrname="";// forget which argument was being filled
            }
        }
    }
    bool dohelp = false;
    bool doexit=false;
    if (algo_lib::_db.cmdline.help) {
        dohelp = true;
        doexit = true;
        algo_lib::_db.exit_code = 1; // help exits with non-zero status code
    } else if (algo_lib::_db.cmdline.version) {
        // -ver output goes to stdout
        prlog(algo::gitinfo_Get());
        doexit = true;
    } else if (algo_lib::_db.cmdline.signature) {
        ind_beg(algo_lib::_db_dispsigcheck_curs,dispsigcheck,algo_lib::_db) {
            // dispsig goes to stdout
            dmmeta::Dispsigcheck out;
            dispsigcheck_CopyOut(dispsigcheck,out);
            prlog(out);
        }ind_end
        doexit = true;
    }
    if (!dohelp) {
    }
    // dmmeta.floadtuples:bzg.FDb.cmdline
    if (!dohelp && err=="") {
        algo_lib::ResetErrtext();
        if (!bzg::LoadTuplesMaybe(cmd.in,true)) {
            err << "bzg.load_input  "<<algo_lib::DetachBadTags()<<eol;
        }
    }
    if (err != "") {
        algo_lib::_db.exit_code=1;
        prerr(err);
        doexit=true;
    }
    if (dohelp) {
        prlog(bzg_help);
    }
    if (doexit) {
        _exit(algo_lib::_db.exit_code);
    }
    algo_lib::ResetErrtext();
}

// --- bzg.FDb._db.MainLoop
// Main loop.
void bzg::MainLoop() {
    algo::SchedTime time(algo::get_cycles());
    algo_lib::_db.clock          = time;
    do {
        algo_lib::_db.next_loop.value = algo_lib::_db.limit;
        bzg::Steps();
    } while (algo_lib::_db.next_loop < algo_lib::_db.limit);
}

// --- bzg.FDb._db.Step
// Main step
void bzg::Step() {
}

// --- bzg.FDb._db.InitReflection
// Load statically available data into tables, register tables and database.
static void bzg::InitReflection() {
    algo_lib::imdb_InsertMaybe(algo::Imdb("bzg", bzg::InsertStrptrMaybe, NULL, bzg::MainLoop, NULL, algo::Comment()));

    algo::Imtable t_trace;
    t_trace.imtable         = "bzg.trace";
    t_trace.ssimfile        = "";
    t_trace.size            = sizeof(bzg::trace);
    t_trace.comment.value   = "";
    t_trace.c_RowidFind     = trace_RowidFind;
    t_trace.NItems          = trace_N;
    t_trace.Print           = (algo::ImrowPrintFcn)bzg::trace_Print;
    algo_lib::imtable_InsertMaybe(t_trace);


    // -- load signatures of existing dispatches --
    algo_lib::InsertStrptrMaybe("dmmeta.Dispsigcheck  dispsig:'bzg.Input'  signature:'3b0ca08489949e6662ad4361e84722e8cb2c7b7a'");
}

// --- bzg.FDb._db.InsertStrptrMaybe
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
bool bzg::InsertStrptrMaybe(algo::strptr str) {
    bool retval = true;
    bzg::TableId table_id(-1);
    value_SetStrptrMaybe(table_id, algo::GetTypeTag(str));
    switch (value_GetEnum(table_id)) {
        case bzg_TableId_dev_Targsrc: { // finput:bzg.FDb.targsrc
            dev::Targsrc elem;
            retval = dev::Targsrc_ReadStrptrMaybe(elem, str);
            retval = retval && targsrc_InputMaybe(elem);
            break;
        }
        case bzg_TableId_dev_Targdep: { // finput:bzg.FDb.targdep
            dev::Targdep elem;
            retval = dev::Targdep_ReadStrptrMaybe(elem, str);
            retval = retval && targdep_InputMaybe(elem);
            break;
        }
        case bzg_TableId_dev_ToolOpt: { // finput:bzg.FDb.tool_opt
            dev::ToolOpt elem;
            retval = dev::ToolOpt_ReadStrptrMaybe(elem, str);
            retval = retval && tool_opt_InputMaybe(elem);
            break;
        }
        case bzg_TableId_dmmeta_Ns: { // finput:bzg.FDb.ns
            dmmeta::Ns elem;
            retval = dmmeta::Ns_ReadStrptrMaybe(elem, str);
            retval = retval && ns_InputMaybe(elem);
            break;
        }
        case bzg_TableId_dev_Targsyslib: { // finput:bzg.FDb.targsyslib
            dev::Targsyslib elem;
            retval = dev::Targsyslib_ReadStrptrMaybe(elem, str);
            retval = retval && targsyslib_InputMaybe(elem);
            break;
        }
        default:
        break;
    } //switch
    if (!retval) {
        algo_lib::NoteInsertErr(str); // increment error counter
    }
    return retval;
}

// --- bzg.FDb._db.LoadTuplesMaybe
// Load all finputs from given directory.
bool bzg::LoadTuplesMaybe(algo::strptr root, bool recursive) {
    bool retval = true;
    if (FileQ(root)) {
        retval = bzg::LoadTuplesFile(root, recursive);
    } else if (root == "-") {
        retval = bzg::LoadTuplesFd(algo::Fildes(0),"(stdin)",recursive);
    } else if (DirectoryQ(root)) {
        retval = retval && bzg::LoadTuplesFile(algo::SsimFname(root,"dmmeta.ns"),recursive);
        retval = retval && bzg::LoadTuplesFile(algo::SsimFname(root,"dmmeta.dispsigcheck"),recursive);
        retval = retval && bzg::LoadTuplesFile(algo::SsimFname(root,"dev.tool_opt"),recursive);
        retval = retval && bzg::LoadTuplesFile(algo::SsimFname(root,"dev.targsyslib"),recursive);
        retval = retval && bzg::LoadTuplesFile(algo::SsimFname(root,"dev.targsrc"),recursive);
        retval = retval && bzg::LoadTuplesFile(algo::SsimFname(root,"dev.targdep"),recursive);
    } else {
        algo_lib::SaveBadTag("path", root);
        algo_lib::SaveBadTag("comment", "Wrong working directory?");
        retval = false;
    }
    return retval;
}

// --- bzg.FDb._db.LoadTuplesFile
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
bool bzg::LoadTuplesFile(algo::strptr fname, bool recursive) {
    bool retval = true;
    algo_lib::FFildes fildes;
    // missing files are not an error
    fildes.fd = OpenRead(fname,algo::FileFlags());
    if (ValidQ(fildes.fd)) {
        retval = LoadTuplesFd(fildes.fd, fname, recursive);
    }
    return retval;
}

// --- bzg.FDb._db.LoadTuplesFd
// Load all finputs from given file descriptor.
bool bzg::LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) {
    bool retval = true;
    ind_beg(algo::FileLine_curs,line,fd) {
        if (recursive) {
            retval = retval && algo_lib::InsertStrptrMaybe(line);
        }
        retval = retval && bzg::InsertStrptrMaybe(line);
        if (!retval) {
            algo_lib::_db.errtext << eol
            << fname << ":"
            << (ind_curs(line).i+1)
            << ": " << line << eol;
            break;
        }
    }ind_end;
    return retval;
}

// --- bzg.FDb._db.LoadSsimfileMaybe
// Load specified ssimfile.
bool bzg::LoadSsimfileMaybe(algo::strptr fname, bool recursive) {
    bool retval = true;
    if (FileQ(fname)) {
        retval = bzg::LoadTuplesFile(fname, recursive);
    }
    return retval;
}

// --- bzg.FDb._db.Steps
// Calls Step function of dependencies
void bzg::Steps() {
    algo_lib::Step(); // dependent namespace specified via (dev.targdep)
}

// --- bzg.FDb._db.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool bzg::_db_XrefMaybe() {
    bool retval = true;
    return retval;
}

// --- bzg.FDb.targsrc.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
bzg::FTargsrc& bzg::targsrc_Alloc() {
    bzg::FTargsrc* row = targsrc_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("bzg.out_of_mem  field:bzg.FDb.targsrc  comment:'Alloc failed'");
    }
    return *row;
}

// --- bzg.FDb.targsrc.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
bzg::FTargsrc* bzg::targsrc_AllocMaybe() {
    bzg::FTargsrc *row = (bzg::FTargsrc*)targsrc_AllocMem();
    if (row) {
        new (row) bzg::FTargsrc; // call constructor
    }
    return row;
}

// --- bzg.FDb.targsrc.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
bzg::FTargsrc* bzg::targsrc_InsertMaybe(const dev::Targsrc &value) {
    bzg::FTargsrc *row = &targsrc_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targsrc_CopyIn(*row,const_cast<dev::Targsrc&>(value));
    bool ok = targsrc_XrefMaybe(*row); // this may return false
    if (!ok) {
        targsrc_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- bzg.FDb.targsrc.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* bzg::targsrc_AllocMem() {
    u64 new_nelems     = _db.targsrc_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    bzg::FTargsrc*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targsrc_lary[bsr];
        if (!lev) {
            lev=(bzg::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(bzg::FTargsrc) * (u64(1)<<bsr));
            _db.targsrc_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targsrc_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- bzg.FDb.targsrc.RemoveAll
// Remove all elements from Lary
void bzg::targsrc_RemoveAll() {
    for (u64 n = _db.targsrc_n; n>0; ) {
        n--;
        targsrc_qFind(u64(n)).~FTargsrc(); // destroy last element
        _db.targsrc_n = i32(n);
    }
}

// --- bzg.FDb.targsrc.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void bzg::targsrc_RemoveLast() {
    u64 n = _db.targsrc_n;
    if (n > 0) {
        n -= 1;
        targsrc_qFind(u64(n)).~FTargsrc();
        _db.targsrc_n = i32(n);
    }
}

// --- bzg.FDb.targsrc.InputMaybe
static bool bzg::targsrc_InputMaybe(dev::Targsrc &elem) {
    bool retval = true;
    retval = targsrc_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- bzg.FDb.targsrc.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool bzg::targsrc_XrefMaybe(bzg::FTargsrc &row) {
    bool retval = true;
    (void)row;
    bzg::FNs* p_target = bzg::ind_ns_Find(target_Get(row));
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "bzg.bad_xref  index:bzg.FDb.ind_ns" << Keyval("key", target_Get(row));
        return false;
    }
    // insert targsrc into index zd_targsrc
    if (true) { // user-defined insert condition
        zd_targsrc_Insert(*p_target, row);
    }
    return retval;
}

// --- bzg.FDb.targdep.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
bzg::FTargdep& bzg::targdep_Alloc() {
    bzg::FTargdep* row = targdep_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("bzg.out_of_mem  field:bzg.FDb.targdep  comment:'Alloc failed'");
    }
    return *row;
}

// --- bzg.FDb.targdep.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
bzg::FTargdep* bzg::targdep_AllocMaybe() {
    bzg::FTargdep *row = (bzg::FTargdep*)targdep_AllocMem();
    if (row) {
        new (row) bzg::FTargdep; // call constructor
    }
    return row;
}

// --- bzg.FDb.targdep.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
bzg::FTargdep* bzg::targdep_InsertMaybe(const dev::Targdep &value) {
    bzg::FTargdep *row = &targdep_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targdep_CopyIn(*row,const_cast<dev::Targdep&>(value));
    bool ok = targdep_XrefMaybe(*row); // this may return false
    if (!ok) {
        targdep_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- bzg.FDb.targdep.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* bzg::targdep_AllocMem() {
    u64 new_nelems     = _db.targdep_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    bzg::FTargdep*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targdep_lary[bsr];
        if (!lev) {
            lev=(bzg::FTargdep*)algo_lib::malloc_AllocMem(sizeof(bzg::FTargdep) * (u64(1)<<bsr));
            _db.targdep_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targdep_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- bzg.FDb.targdep.RemoveAll
// Remove all elements from Lary
void bzg::targdep_RemoveAll() {
    for (u64 n = _db.targdep_n; n>0; ) {
        n--;
        targdep_qFind(u64(n)).~FTargdep(); // destroy last element
        _db.targdep_n = i32(n);
    }
}

// --- bzg.FDb.targdep.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void bzg::targdep_RemoveLast() {
    u64 n = _db.targdep_n;
    if (n > 0) {
        n -= 1;
        targdep_qFind(u64(n)).~FTargdep();
        _db.targdep_n = i32(n);
    }
}

// --- bzg.FDb.targdep.InputMaybe
static bool bzg::targdep_InputMaybe(dev::Targdep &elem) {
    bool retval = true;
    retval = targdep_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- bzg.FDb.targdep.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool bzg::targdep_XrefMaybe(bzg::FTargdep &row) {
    bool retval = true;
    (void)row;
    bzg::FNs* p_target = bzg::ind_ns_Find(target_Get(row));
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "bzg.bad_xref  index:bzg.FDb.ind_ns" << Keyval("key", target_Get(row));
        return false;
    }
    // insert targdep into index zd_targdep
    if (true) { // user-defined insert condition
        zd_targdep_Insert(*p_target, row);
    }
    return retval;
}

// --- bzg.FDb.tool_opt.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
bzg::FToolOpt& bzg::tool_opt_Alloc() {
    bzg::FToolOpt* row = tool_opt_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("bzg.out_of_mem  field:bzg.FDb.tool_opt  comment:'Alloc failed'");
    }
    return *row;
}

// --- bzg.FDb.tool_opt.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
bzg::FToolOpt* bzg::tool_opt_AllocMaybe() {
    bzg::FToolOpt *row = (bzg::FToolOpt*)tool_opt_AllocMem();
    if (row) {
        new (row) bzg::FToolOpt; // call constructor
    }
    return row;
}

// --- bzg.FDb.tool_opt.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
bzg::FToolOpt* bzg::tool_opt_InsertMaybe(const dev::ToolOpt &value) {
    bzg::FToolOpt *row = &tool_opt_Alloc(); // if out of memory, process dies. if input error, return NULL.
    tool_opt_CopyIn(*row,const_cast<dev::ToolOpt&>(value));
    bool ok = tool_opt_XrefMaybe(*row); // this may return false
    if (!ok) {
        tool_opt_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- bzg.FDb.tool_opt.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* bzg::tool_opt_AllocMem() {
    u64 new_nelems     = _db.tool_opt_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    bzg::FToolOpt*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.tool_opt_lary[bsr];
        if (!lev) {
            lev=(bzg::FToolOpt*)algo_lib::malloc_AllocMem(sizeof(bzg::FToolOpt) * (u64(1)<<bsr));
            _db.tool_opt_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.tool_opt_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- bzg.FDb.tool_opt.RemoveAll
// Remove all elements from Lary
void bzg::tool_opt_RemoveAll() {
    for (u64 n = _db.tool_opt_n; n>0; ) {
        n--;
        tool_opt_qFind(u64(n)).~FToolOpt(); // destroy last element
        _db.tool_opt_n = i32(n);
    }
}

// --- bzg.FDb.tool_opt.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void bzg::tool_opt_RemoveLast() {
    u64 n = _db.tool_opt_n;
    if (n > 0) {
        n -= 1;
        tool_opt_qFind(u64(n)).~FToolOpt();
        _db.tool_opt_n = i32(n);
    }
}

// --- bzg.FDb.tool_opt.InputMaybe
static bool bzg::tool_opt_InputMaybe(dev::ToolOpt &elem) {
    bool retval = true;
    retval = tool_opt_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- bzg.FDb.tool_opt.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool bzg::tool_opt_XrefMaybe(bzg::FToolOpt &row) {
    bool retval = true;
    (void)row;
    return retval;
}

// --- bzg.FDb.ns.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
bzg::FNs& bzg::ns_Alloc() {
    bzg::FNs* row = ns_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("bzg.out_of_mem  field:bzg.FDb.ns  comment:'Alloc failed'");
    }
    return *row;
}

// --- bzg.FDb.ns.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
bzg::FNs* bzg::ns_AllocMaybe() {
    bzg::FNs *row = (bzg::FNs*)ns_AllocMem();
    if (row) {
        new (row) bzg::FNs; // call constructor
    }
    return row;
}

// --- bzg.FDb.ns.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
bzg::FNs* bzg::ns_InsertMaybe(const dmmeta::Ns &value) {
    bzg::FNs *row = &ns_Alloc(); // if out of memory, process dies. if input error, return NULL.
    ns_CopyIn(*row,const_cast<dmmeta::Ns&>(value));
    bool ok = ns_XrefMaybe(*row); // this may return false
    if (!ok) {
        ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- bzg.FDb.ns.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* bzg::ns_AllocMem() {
    u64 new_nelems     = _db.ns_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    bzg::FNs*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.ns_lary[bsr];
        if (!lev) {
            lev=(bzg::FNs*)algo_lib::malloc_AllocMem(sizeof(bzg::FNs) * (u64(1)<<bsr));
            _db.ns_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.ns_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- bzg.FDb.ns.RemoveAll
// Remove all elements from Lary
void bzg::ns_RemoveAll() {
    for (u64 n = _db.ns_n; n>0; ) {
        n--;
        ns_qFind(u64(n)).~FNs(); // destroy last element
        _db.ns_n = i32(n);
    }
}

// --- bzg.FDb.ns.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void bzg::ns_RemoveLast() {
    u64 n = _db.ns_n;
    if (n > 0) {
        n -= 1;
        ns_qFind(u64(n)).~FNs();
        _db.ns_n = i32(n);
    }
}

// --- bzg.FDb.ns.InputMaybe
static bool bzg::ns_InputMaybe(dmmeta::Ns &elem) {
    bool retval = true;
    retval = ns_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- bzg.FDb.ns.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool bzg::ns_XrefMaybe(bzg::FNs &row) {
    bool retval = true;
    (void)row;
    // insert ns into index ind_ns
    if (true) { // user-defined insert condition
        bool success = ind_ns_InsertMaybe(row);
        if (UNLIKELY(!success)) {
            ch_RemoveAll(algo_lib::_db.errtext);
            algo_lib::_db.errtext << "bzg.duplicate_key  xref:bzg.FDb.ind_ns"; // check for duplicate key
            return false;
        }
    }
    return retval;
}

// --- bzg.FDb.ind_ns.Find
// Find row by key. Return NULL if not found.
bzg::FNs* bzg::ind_ns_Find(const algo::strptr& key) {
    u32 index = algo::Smallstr16_Hash(0, key) & (_db.ind_ns_buckets_n - 1);
    bzg::FNs* *e = &_db.ind_ns_buckets_elems[index];
    bzg::FNs* ret=NULL;
    do {
        ret       = *e;
        bool done = !ret || (*ret).ns == key;
        if (done) break;
        e         = &ret->ind_ns_next;
    } while (true);
    return ret;
}

// --- bzg.FDb.ind_ns.FindX
// Look up row by key and return reference. Throw exception if not found
bzg::FNs& bzg::ind_ns_FindX(const algo::strptr& key) {
    bzg::FNs* ret = ind_ns_Find(key);
    vrfy(ret, tempstr() << "bzg.key_error  table:ind_ns  key:'"<<key<<"'  comment:'key not found'");
    return *ret;
}

// --- bzg.FDb.ind_ns.GetOrCreate
// Find row by key. If not found, create and x-reference a new row with with this key.
bzg::FNs& bzg::ind_ns_GetOrCreate(const algo::strptr& key) {
    bzg::FNs* ret = ind_ns_Find(key);
    if (!ret) { //  if memory alloc fails, process dies; if insert fails, function returns NULL.
        ret         = &ns_Alloc();
        (*ret).ns = key;
        bool good = ns_XrefMaybe(*ret);
        if (!good) {
            ns_RemoveLast(); // delete offending row, any existing xrefs are cleared
            ret = NULL;
        }
    }
    vrfy(ret, tempstr() << "bzg.create_error  table:ind_ns  key:'"<<key<<"'  comment:'bad xref'");
    return *ret;
}

// --- bzg.FDb.ind_ns.InsertMaybe
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
bool bzg::ind_ns_InsertMaybe(bzg::FNs& row) {
    ind_ns_Reserve(1);
    bool retval = true; // if already in hash, InsertMaybe returns true
    if (LIKELY(row.ind_ns_next == (bzg::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        bzg::FNs* *prev = &_db.ind_ns_buckets_elems[index];
        do {
            bzg::FNs* ret = *prev;
            if (!ret) { // exit condition 1: reached the end of the list
                break;
            }
            if ((*ret).ns == row.ns) { // exit condition 2: found matching key
                retval = false;
                break;
            }
            prev = &ret->ind_ns_next;
        } while (true);
        if (retval) {
            row.ind_ns_next = *prev;
            _db.ind_ns_n++;
            *prev = &row;
        }
    }
    return retval;
}

// --- bzg.FDb.ind_ns.Remove
// Remove reference to element from hash index. If element is not in hash, do nothing
void bzg::ind_ns_Remove(bzg::FNs& row) {
    if (LIKELY(row.ind_ns_next != (bzg::FNs*)-1)) {// check if in hash already
        u32 index = algo::Smallstr16_Hash(0, row.ns) & (_db.ind_ns_buckets_n - 1);
        bzg::FNs* *prev = &_db.ind_ns_buckets_elems[index]; // addr of pointer to current element
        while (bzg::FNs *next = *prev) {                          // scan the collision chain for our element
            if (next == &row) {        // found it?
                *prev = next->ind_ns_next; // unlink (singly linked list)
                _db.ind_ns_n--;
                row.ind_ns_next = (bzg::FNs*)-1;// not-in-hash
                break;
            }
            prev = &next->ind_ns_next;
        }
    }
}

// --- bzg.FDb.ind_ns.Reserve
// Reserve enough room in the hash for N more elements. Return success code.
void bzg::ind_ns_Reserve(int n) {
    u32 old_nbuckets = _db.ind_ns_buckets_n;
    u32 new_nelems   = _db.ind_ns_n + n;
    // # of elements has to be roughly equal to the number of buckets
    if (new_nelems > old_nbuckets) {
        int new_nbuckets = i32_Max(algo::BumpToPow2(new_nelems), u32(4));
        u32 old_size = old_nbuckets * sizeof(bzg::FNs*);
        u32 new_size = new_nbuckets * sizeof(bzg::FNs*);
        // allocate new array. we don't use Realloc since copying is not needed and factor of 2 probably
        // means new memory will have to be allocated anyway
        bzg::FNs* *new_buckets = (bzg::FNs**)algo_lib::malloc_AllocMem(new_size);
        if (UNLIKELY(!new_buckets)) {
            FatalErrorExit("bzg.out_of_memory  field:bzg.FDb.ind_ns");
        }
        memset(new_buckets, 0, new_size); // clear pointers
        // rehash all entries
        for (int i = 0; i < _db.ind_ns_buckets_n; i++) {
            bzg::FNs* elem = _db.ind_ns_buckets_elems[i];
            while (elem) {
                bzg::FNs &row        = *elem;
                bzg::FNs* next       = row.ind_ns_next;
                u32 index          = algo::Smallstr16_Hash(0, row.ns) & (new_nbuckets-1);
                row.ind_ns_next     = new_buckets[index];
                new_buckets[index] = &row;
                elem               = next;
            }
        }
        // free old array
        algo_lib::malloc_FreeMem(_db.ind_ns_buckets_elems, old_size);
        _db.ind_ns_buckets_elems = new_buckets;
        _db.ind_ns_buckets_n = new_nbuckets;
    }
}

// --- bzg.FDb.targsyslib.Alloc
// Allocate memory for new default row.
// If out of memory, process is killed.
bzg::FTargsyslib& bzg::targsyslib_Alloc() {
    bzg::FTargsyslib* row = targsyslib_AllocMaybe();
    if (UNLIKELY(row == NULL)) {
        FatalErrorExit("bzg.out_of_mem  field:bzg.FDb.targsyslib  comment:'Alloc failed'");
    }
    return *row;
}

// --- bzg.FDb.targsyslib.AllocMaybe
// Allocate memory for new element. If out of memory, return NULL.
bzg::FTargsyslib* bzg::targsyslib_AllocMaybe() {
    bzg::FTargsyslib *row = (bzg::FTargsyslib*)targsyslib_AllocMem();
    if (row) {
        new (row) bzg::FTargsyslib; // call constructor
    }
    return row;
}

// --- bzg.FDb.targsyslib.InsertMaybe
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
bzg::FTargsyslib* bzg::targsyslib_InsertMaybe(const dev::Targsyslib &value) {
    bzg::FTargsyslib *row = &targsyslib_Alloc(); // if out of memory, process dies. if input error, return NULL.
    targsyslib_CopyIn(*row,const_cast<dev::Targsyslib&>(value));
    bool ok = targsyslib_XrefMaybe(*row); // this may return false
    if (!ok) {
        targsyslib_RemoveLast(); // delete offending row, any existing xrefs are cleared
        row = NULL; // forget this ever happened
    }
    return row;
}

// --- bzg.FDb.targsyslib.AllocMem
// Allocate space for one element. If no memory available, return NULL.
void* bzg::targsyslib_AllocMem() {
    u64 new_nelems     = _db.targsyslib_n+1;
    // compute level and index on level
    u64 bsr   = algo::u64_BitScanReverse(new_nelems);
    u64 base  = u64(1)<<bsr;
    u64 index = new_nelems-base;
    void *ret = NULL;
    // if level doesn't exist yet, create it
    bzg::FTargsyslib*  lev   = NULL;
    if (bsr < 32) {
        lev = _db.targsyslib_lary[bsr];
        if (!lev) {
            lev=(bzg::FTargsyslib*)algo_lib::malloc_AllocMem(sizeof(bzg::FTargsyslib) * (u64(1)<<bsr));
            _db.targsyslib_lary[bsr] = lev;
        }
    }
    // allocate element from this level
    if (lev) {
        _db.targsyslib_n = i32(new_nelems);
        ret = lev + index;
    }
    return ret;
}

// --- bzg.FDb.targsyslib.RemoveAll
// Remove all elements from Lary
void bzg::targsyslib_RemoveAll() {
    for (u64 n = _db.targsyslib_n; n>0; ) {
        n--;
        targsyslib_qFind(u64(n)).~FTargsyslib(); // destroy last element
        _db.targsyslib_n = i32(n);
    }
}

// --- bzg.FDb.targsyslib.RemoveLast
// Delete last element of array. Do nothing if array is empty.
void bzg::targsyslib_RemoveLast() {
    u64 n = _db.targsyslib_n;
    if (n > 0) {
        n -= 1;
        targsyslib_qFind(u64(n)).~FTargsyslib();
        _db.targsyslib_n = i32(n);
    }
}

// --- bzg.FDb.targsyslib.InputMaybe
static bool bzg::targsyslib_InputMaybe(dev::Targsyslib &elem) {
    bool retval = true;
    retval = targsyslib_InsertMaybe(elem) != nullptr;
    return retval;
}

// --- bzg.FDb.targsyslib.XrefMaybe
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
bool bzg::targsyslib_XrefMaybe(bzg::FTargsyslib &row) {
    bool retval = true;
    (void)row;
    bzg::FNs* p_target = bzg::ind_ns_Find(target_Get(row));
    if (UNLIKELY(!p_target)) {
        algo_lib::ResetErrtext() << "bzg.bad_xref  index:bzg.FDb.ind_ns" << Keyval("key", target_Get(row));
        return false;
    }
    // targsyslib: save pointer to target
    if (true) { // user-defined insert condition
        row.p_ns = p_target;
    }
    return retval;
}

// --- bzg.FDb.trace.RowidFind
// find trace by row id (used to implement reflection)
static algo::ImrowPtr bzg::trace_RowidFind(int t) {
    return algo::ImrowPtr(t==0 ? u64(&_db.trace) : u64(0));
}

// --- bzg.FDb.trace.N
// Function return 1
inline static i32 bzg::trace_N() {
    return 1;
}

// --- bzg.FDb..Init
// Set all fields to initial values.
void bzg::FDb_Init() {
    // initialize LAry targsrc (bzg.FDb.targsrc)
    _db.targsrc_n = 0;
    memset(_db.targsrc_lary, 0, sizeof(_db.targsrc_lary)); // zero out all level pointers
    bzg::FTargsrc* targsrc_first = (bzg::FTargsrc*)algo_lib::malloc_AllocMem(sizeof(bzg::FTargsrc) * (u64(1)<<4));
    if (!targsrc_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targsrc_lary[i]  = targsrc_first;
        targsrc_first    += 1ULL<<i;
    }
    // initialize LAry targdep (bzg.FDb.targdep)
    _db.targdep_n = 0;
    memset(_db.targdep_lary, 0, sizeof(_db.targdep_lary)); // zero out all level pointers
    bzg::FTargdep* targdep_first = (bzg::FTargdep*)algo_lib::malloc_AllocMem(sizeof(bzg::FTargdep) * (u64(1)<<4));
    if (!targdep_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targdep_lary[i]  = targdep_first;
        targdep_first    += 1ULL<<i;
    }
    // initialize LAry tool_opt (bzg.FDb.tool_opt)
    _db.tool_opt_n = 0;
    memset(_db.tool_opt_lary, 0, sizeof(_db.tool_opt_lary)); // zero out all level pointers
    bzg::FToolOpt* tool_opt_first = (bzg::FToolOpt*)algo_lib::malloc_AllocMem(sizeof(bzg::FToolOpt) * (u64(1)<<4));
    if (!tool_opt_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.tool_opt_lary[i]  = tool_opt_first;
        tool_opt_first    += 1ULL<<i;
    }
    // initialize LAry ns (bzg.FDb.ns)
    _db.ns_n = 0;
    memset(_db.ns_lary, 0, sizeof(_db.ns_lary)); // zero out all level pointers
    bzg::FNs* ns_first = (bzg::FNs*)algo_lib::malloc_AllocMem(sizeof(bzg::FNs) * (u64(1)<<4));
    if (!ns_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.ns_lary[i]  = ns_first;
        ns_first    += 1ULL<<i;
    }
    // initialize hash table for bzg::FNs;
    _db.ind_ns_n             	= 0; // (bzg.FDb.ind_ns)
    _db.ind_ns_buckets_n     	= 4; // (bzg.FDb.ind_ns)
    _db.ind_ns_buckets_elems 	= (bzg::FNs**)algo_lib::malloc_AllocMem(sizeof(bzg::FNs*)*_db.ind_ns_buckets_n); // initial buckets (bzg.FDb.ind_ns)
    if (!_db.ind_ns_buckets_elems) {
        FatalErrorExit("out of memory"); // (bzg.FDb.ind_ns)
    }
    memset(_db.ind_ns_buckets_elems, 0, sizeof(bzg::FNs*)*_db.ind_ns_buckets_n); // (bzg.FDb.ind_ns)
    // initialize LAry targsyslib (bzg.FDb.targsyslib)
    _db.targsyslib_n = 0;
    memset(_db.targsyslib_lary, 0, sizeof(_db.targsyslib_lary)); // zero out all level pointers
    bzg::FTargsyslib* targsyslib_first = (bzg::FTargsyslib*)algo_lib::malloc_AllocMem(sizeof(bzg::FTargsyslib) * (u64(1)<<4));
    if (!targsyslib_first) {
        FatalErrorExit("out of memory");
    }
    for (int i = 0; i < 4; i++) {
        _db.targsyslib_lary[i]  = targsyslib_first;
        targsyslib_first    += 1ULL<<i;
    }

    bzg::InitReflection();
}

// --- bzg.FDb..Uninit
void bzg::FDb_Uninit() {
    bzg::FDb &row = _db; (void)row;

    // bzg.FDb.targsyslib.Uninit (Lary)  //
    // skip destruction in global scope

    // bzg.FDb.ind_ns.Uninit (Thash)  //
    // skip destruction of ind_ns in global scope

    // bzg.FDb.ns.Uninit (Lary)  //
    // skip destruction in global scope

    // bzg.FDb.tool_opt.Uninit (Lary)  //
    // skip destruction in global scope

    // bzg.FDb.targdep.Uninit (Lary)  //
    // skip destruction in global scope

    // bzg.FDb.targsrc.Uninit (Lary)  //
    // skip destruction in global scope
}

// --- bzg.FNs.base.CopyOut
// Copy fields out of row
void bzg::ns_CopyOut(bzg::FNs &row, dmmeta::Ns &out) {
    out.ns = row.ns;
    out.nstype = row.nstype;
    out.license = row.license;
    out.comment = row.comment;
}

// --- bzg.FNs.base.CopyIn
// Copy fields in to row
void bzg::ns_CopyIn(bzg::FNs &row, dmmeta::Ns &in) {
    row.ns = in.ns;
    row.nstype = in.nstype;
    row.license = in.license;
    row.comment = in.comment;
}

// --- bzg.FNs.zd_targsrc.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void bzg::zd_targsrc_Insert(bzg::FNs& ns, bzg::FTargsrc& row) {
    if (!zd_targsrc_InLlistQ(row)) {
        bzg::FTargsrc* old_tail = ns.zd_targsrc_tail;
        row.zd_targsrc_next = NULL;
        row.zd_targsrc_prev = old_tail;
        ns.zd_targsrc_tail = &row;
        bzg::FTargsrc **new_row_a = &old_tail->zd_targsrc_next;
        bzg::FTargsrc **new_row_b = &ns.zd_targsrc_head;
        bzg::FTargsrc **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        ns.zd_targsrc_n++;
    }
}

// --- bzg.FNs.zd_targsrc.Remove
// Remove element from index. If element is not in index, do nothing.
void bzg::zd_targsrc_Remove(bzg::FNs& ns, bzg::FTargsrc& row) {
    if (zd_targsrc_InLlistQ(row)) {
        bzg::FTargsrc* old_head       = ns.zd_targsrc_head;
        (void)old_head; // in case it's not used
        bzg::FTargsrc* prev = row.zd_targsrc_prev;
        bzg::FTargsrc* next = row.zd_targsrc_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        bzg::FTargsrc **new_next_a = &prev->zd_targsrc_next;
        bzg::FTargsrc **new_next_b = &ns.zd_targsrc_head;
        bzg::FTargsrc **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        bzg::FTargsrc **new_prev_a = &next->zd_targsrc_prev;
        bzg::FTargsrc **new_prev_b = &ns.zd_targsrc_tail;
        bzg::FTargsrc **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        ns.zd_targsrc_n--;
        row.zd_targsrc_next=(bzg::FTargsrc*)-1; // not-in-list
    }
}

// --- bzg.FNs.zd_targsrc.RemoveAll
// Empty the index. (The rows are not deleted)
void bzg::zd_targsrc_RemoveAll(bzg::FNs& ns) {
    bzg::FTargsrc* row = ns.zd_targsrc_head;
    ns.zd_targsrc_head = NULL;
    ns.zd_targsrc_tail = NULL;
    ns.zd_targsrc_n = 0;
    while (row) {
        bzg::FTargsrc* row_next = row->zd_targsrc_next;
        row->zd_targsrc_next  = (bzg::FTargsrc*)-1;
        row->zd_targsrc_prev  = NULL;
        row = row_next;
    }
}

// --- bzg.FNs.zd_targsrc.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
bzg::FTargsrc* bzg::zd_targsrc_RemoveFirst(bzg::FNs& ns) {
    bzg::FTargsrc *row = NULL;
    row = ns.zd_targsrc_head;
    if (row) {
        bzg::FTargsrc *next = row->zd_targsrc_next;
        ns.zd_targsrc_head = next;
        bzg::FTargsrc **new_end_a = &next->zd_targsrc_prev;
        bzg::FTargsrc **new_end_b = &ns.zd_targsrc_tail;
        bzg::FTargsrc **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        ns.zd_targsrc_n--;
        row->zd_targsrc_next = (bzg::FTargsrc*)-1; // mark as not-in-list
    }
    return row;
}

// --- bzg.FNs.zd_targdep.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void bzg::zd_targdep_Insert(bzg::FNs& ns, bzg::FTargdep& row) {
    if (!zd_targdep_InLlistQ(row)) {
        bzg::FTargdep* old_tail = ns.zd_targdep_tail;
        row.zd_targdep_next = NULL;
        row.zd_targdep_prev = old_tail;
        ns.zd_targdep_tail = &row;
        bzg::FTargdep **new_row_a = &old_tail->zd_targdep_next;
        bzg::FTargdep **new_row_b = &ns.zd_targdep_head;
        bzg::FTargdep **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        ns.zd_targdep_n++;
    }
}

// --- bzg.FNs.zd_targdep.Remove
// Remove element from index. If element is not in index, do nothing.
void bzg::zd_targdep_Remove(bzg::FNs& ns, bzg::FTargdep& row) {
    if (zd_targdep_InLlistQ(row)) {
        bzg::FTargdep* old_head       = ns.zd_targdep_head;
        (void)old_head; // in case it's not used
        bzg::FTargdep* prev = row.zd_targdep_prev;
        bzg::FTargdep* next = row.zd_targdep_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        bzg::FTargdep **new_next_a = &prev->zd_targdep_next;
        bzg::FTargdep **new_next_b = &ns.zd_targdep_head;
        bzg::FTargdep **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        bzg::FTargdep **new_prev_a = &next->zd_targdep_prev;
        bzg::FTargdep **new_prev_b = &ns.zd_targdep_tail;
        bzg::FTargdep **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        ns.zd_targdep_n--;
        row.zd_targdep_next=(bzg::FTargdep*)-1; // not-in-list
    }
}

// --- bzg.FNs.zd_targdep.RemoveAll
// Empty the index. (The rows are not deleted)
void bzg::zd_targdep_RemoveAll(bzg::FNs& ns) {
    bzg::FTargdep* row = ns.zd_targdep_head;
    ns.zd_targdep_head = NULL;
    ns.zd_targdep_tail = NULL;
    ns.zd_targdep_n = 0;
    while (row) {
        bzg::FTargdep* row_next = row->zd_targdep_next;
        row->zd_targdep_next  = (bzg::FTargdep*)-1;
        row->zd_targdep_prev  = NULL;
        row = row_next;
    }
}

// --- bzg.FNs.zd_targdep.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
bzg::FTargdep* bzg::zd_targdep_RemoveFirst(bzg::FNs& ns) {
    bzg::FTargdep *row = NULL;
    row = ns.zd_targdep_head;
    if (row) {
        bzg::FTargdep *next = row->zd_targdep_next;
        ns.zd_targdep_head = next;
        bzg::FTargdep **new_end_a = &next->zd_targdep_prev;
        bzg::FTargdep **new_end_b = &ns.zd_targdep_tail;
        bzg::FTargdep **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        ns.zd_targdep_n--;
        row->zd_targdep_next = (bzg::FTargdep*)-1; // mark as not-in-list
    }
    return row;
}

// --- bzg.FNs.zd_targsyslib.Insert
// Insert row into linked list. If row is already in linked list, do nothing.
void bzg::zd_targsyslib_Insert(bzg::FNs& ns, bzg::FTargsyslib& row) {
    if (!zd_targsyslib_InLlistQ(row)) {
        bzg::FTargsyslib* old_tail = ns.zd_targsyslib_tail;
        row.zd_targsyslib_next = NULL;
        row.zd_targsyslib_prev = old_tail;
        ns.zd_targsyslib_tail = &row;
        bzg::FTargsyslib **new_row_a = &old_tail->zd_targsyslib_next;
        bzg::FTargsyslib **new_row_b = &ns.zd_targsyslib_head;
        bzg::FTargsyslib **new_row = old_tail ? new_row_a : new_row_b;
        *new_row = &row;
        ns.zd_targsyslib_n++;
    }
}

// --- bzg.FNs.zd_targsyslib.Remove
// Remove element from index. If element is not in index, do nothing.
void bzg::zd_targsyslib_Remove(bzg::FNs& ns, bzg::FTargsyslib& row) {
    if (zd_targsyslib_InLlistQ(row)) {
        bzg::FTargsyslib* old_head       = ns.zd_targsyslib_head;
        (void)old_head; // in case it's not used
        bzg::FTargsyslib* prev = row.zd_targsyslib_prev;
        bzg::FTargsyslib* next = row.zd_targsyslib_next;
        // if element is first, adjust list head; otherwise, adjust previous element's next
        bzg::FTargsyslib **new_next_a = &prev->zd_targsyslib_next;
        bzg::FTargsyslib **new_next_b = &ns.zd_targsyslib_head;
        bzg::FTargsyslib **new_next = prev ? new_next_a : new_next_b;
        *new_next = next;
        // if element is last, adjust list tail; otherwise, adjust next element's prev
        bzg::FTargsyslib **new_prev_a = &next->zd_targsyslib_prev;
        bzg::FTargsyslib **new_prev_b = &ns.zd_targsyslib_tail;
        bzg::FTargsyslib **new_prev = next ? new_prev_a : new_prev_b;
        *new_prev = prev;
        ns.zd_targsyslib_n--;
        row.zd_targsyslib_next=(bzg::FTargsyslib*)-1; // not-in-list
    }
}

// --- bzg.FNs.zd_targsyslib.RemoveAll
// Empty the index. (The rows are not deleted)
void bzg::zd_targsyslib_RemoveAll(bzg::FNs& ns) {
    bzg::FTargsyslib* row = ns.zd_targsyslib_head;
    ns.zd_targsyslib_head = NULL;
    ns.zd_targsyslib_tail = NULL;
    ns.zd_targsyslib_n = 0;
    while (row) {
        bzg::FTargsyslib* row_next = row->zd_targsyslib_next;
        row->zd_targsyslib_next  = (bzg::FTargsyslib*)-1;
        row->zd_targsyslib_prev  = NULL;
        row = row_next;
    }
}

// --- bzg.FNs.zd_targsyslib.RemoveFirst
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
bzg::FTargsyslib* bzg::zd_targsyslib_RemoveFirst(bzg::FNs& ns) {
    bzg::FTargsyslib *row = NULL;
    row = ns.zd_targsyslib_head;
    if (row) {
        bzg::FTargsyslib *next = row->zd_targsyslib_next;
        ns.zd_targsyslib_head = next;
        bzg::FTargsyslib **new_end_a = &next->zd_targsyslib_prev;
        bzg::FTargsyslib **new_end_b = &ns.zd_targsyslib_tail;
        bzg::FTargsyslib **new_end = next ? new_end_a : new_end_b;
        *new_end = NULL;
        ns.zd_targsyslib_n--;
        row->zd_targsyslib_next = (bzg::FTargsyslib*)-1; // mark as not-in-list
    }
    return row;
}

// --- bzg.FNs..Uninit
void bzg::FNs_Uninit(bzg::FNs& ns) {
    bzg::FNs &row = ns; (void)row;
    ind_ns_Remove(row); // remove ns from index ind_ns
}

// --- bzg.FTargdep.base.CopyOut
// Copy fields out of row
void bzg::targdep_CopyOut(bzg::FTargdep &row, dev::Targdep &out) {
    out.targdep = row.targdep;
    out.comment = row.comment;
}

// --- bzg.FTargdep.base.CopyIn
// Copy fields in to row
void bzg::targdep_CopyIn(bzg::FTargdep &row, dev::Targdep &in) {
    row.targdep = in.targdep;
    row.comment = in.comment;
}

// --- bzg.FTargdep.target.Get
algo::Smallstr16 bzg::target_Get(bzg::FTargdep& targdep) {
    algo::Smallstr16 ret(algo::Pathcomp(targdep.targdep, ".RL"));
    return ret;
}

// --- bzg.FTargdep.parent.Get
algo::Smallstr16 bzg::parent_Get(bzg::FTargdep& targdep) {
    algo::Smallstr16 ret(algo::Pathcomp(targdep.targdep, ".RR"));
    return ret;
}

// --- bzg.FTargdep..Uninit
void bzg::FTargdep_Uninit(bzg::FTargdep& targdep) {
    bzg::FTargdep &row = targdep; (void)row;
    bzg::FNs* p_target = bzg::ind_ns_Find(target_Get(row));
    if (p_target)  {
        zd_targdep_Remove(*p_target, row);// remove targdep from index zd_targdep
    }
}

// --- bzg.FTargsrc.base.CopyOut
// Copy fields out of row
void bzg::targsrc_CopyOut(bzg::FTargsrc &row, dev::Targsrc &out) {
    out.targsrc = row.targsrc;
    out.comment = row.comment;
}

// --- bzg.FTargsrc.base.CopyIn
// Copy fields in to row
void bzg::targsrc_CopyIn(bzg::FTargsrc &row, dev::Targsrc &in) {
    row.targsrc = in.targsrc;
    row.comment = in.comment;
}

// --- bzg.FTargsrc.target.Get
algo::Smallstr16 bzg::target_Get(bzg::FTargsrc& targsrc) {
    algo::Smallstr16 ret(algo::Pathcomp(targsrc.targsrc, "/LL"));
    return ret;
}

// --- bzg.FTargsrc.src.Get
algo::Smallstr200 bzg::src_Get(bzg::FTargsrc& targsrc) {
    algo::Smallstr200 ret(algo::Pathcomp(targsrc.targsrc, "/LR"));
    return ret;
}

// --- bzg.FTargsrc.ext.Get
algo::Smallstr10 bzg::ext_Get(bzg::FTargsrc& targsrc) {
    algo::Smallstr10 ret(algo::Pathcomp(targsrc.targsrc, ".RR"));
    return ret;
}

// --- bzg.FTargsrc..Uninit
void bzg::FTargsrc_Uninit(bzg::FTargsrc& targsrc) {
    bzg::FTargsrc &row = targsrc; (void)row;
    bzg::FNs* p_target = bzg::ind_ns_Find(target_Get(row));
    if (p_target)  {
        zd_targsrc_Remove(*p_target, row);// remove targsrc from index zd_targsrc
    }
}

// --- bzg.FTargsyslib.base.CopyOut
// Copy fields out of row
void bzg::targsyslib_CopyOut(bzg::FTargsyslib &row, dev::Targsyslib &out) {
    out.targsyslib = row.targsyslib;
    out.comment = row.comment;
}

// --- bzg.FTargsyslib.base.CopyIn
// Copy fields in to row
void bzg::targsyslib_CopyIn(bzg::FTargsyslib &row, dev::Targsyslib &in) {
    row.targsyslib = in.targsyslib;
    row.comment = in.comment;
}

// --- bzg.FTargsyslib.target.Get
algo::Smallstr16 bzg::target_Get(bzg::FTargsyslib& targsyslib) {
    algo::Smallstr16 ret(algo::Pathcomp(targsyslib.targsyslib, "/LR.LL"));
    return ret;
}

// --- bzg.FTargsyslib.syslib.Get
algo::Smallstr50 bzg::syslib_Get(bzg::FTargsyslib& targsyslib) {
    algo::Smallstr50 ret(algo::Pathcomp(targsyslib.targsyslib, "/LR.LR"));
    return ret;
}

// --- bzg.FTargsyslib.uname.Get
algo::Smallstr50 bzg::uname_Get(bzg::FTargsyslib& targsyslib) {
    algo::Smallstr50 ret(algo::Pathcomp(targsyslib.targsyslib, "/LL"));
    return ret;
}

// --- bzg.FTargsyslib..Uninit
void bzg::FTargsyslib_Uninit(bzg::FTargsyslib& targsyslib) {
    bzg::FTargsyslib &row = targsyslib; (void)row;
    bzg::FNs* p_target = bzg::ind_ns_Find(target_Get(row));
    if (p_target)  {
        zd_targsyslib_Remove(*p_target, row);// remove targsyslib from index zd_targsyslib
    }
}

// --- bzg.FToolOpt.base.CopyOut
// Copy fields out of row
void bzg::tool_opt_CopyOut(bzg::FToolOpt &row, dev::ToolOpt &out) {
    out.tool_opt = row.tool_opt;
    out.comment = row.comment;
}

// --- bzg.FToolOpt.base.CopyIn
// Copy fields in to row
void bzg::tool_opt_CopyIn(bzg::FToolOpt &row, dev::ToolOpt &in) {
    row.tool_opt = in.tool_opt;
    row.comment = in.comment;
}

// --- bzg.FToolOpt.uname.Get
algo::Smallstr50 bzg::uname_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr50 ret(algo::Pathcomp(tool_opt.tool_opt, "/LL.LL-LL"));
    return ret;
}

// --- bzg.FToolOpt.compiler.Get
algo::Smallstr50 bzg::compiler_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr50 ret(algo::Pathcomp(tool_opt.tool_opt, "/LL.LL-LR"));
    return ret;
}

// --- bzg.FToolOpt.cfg.Get
algo::Smallstr50 bzg::cfg_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr50 ret(algo::Pathcomp(tool_opt.tool_opt, "/LL.LR-LL"));
    return ret;
}

// --- bzg.FToolOpt.arch.Get
algo::Smallstr50 bzg::arch_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr50 ret(algo::Pathcomp(tool_opt.tool_opt, "/LL.LR-LR"));
    return ret;
}

// --- bzg.FToolOpt.target.Get
algo::Smallstr50 bzg::target_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr50 ret(algo::Pathcomp(tool_opt.tool_opt, "/LR:LL-LL"));
    return ret;
}

// --- bzg.FToolOpt.opt_type.Get
algo::Smallstr50 bzg::opt_type_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr50 ret(algo::Pathcomp(tool_opt.tool_opt, "/LR:LL-LR"));
    return ret;
}

// --- bzg.FToolOpt.opt.Get
algo::Smallstr100 bzg::opt_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr100 ret(algo::Pathcomp(tool_opt.tool_opt, "/LR:LR"));
    return ret;
}

// --- bzg.FToolOpt.sortfld.Get
algo::Smallstr50 bzg::sortfld_Get(bzg::FToolOpt& tool_opt) {
    algo::Smallstr50 ret(algo::Pathcomp(tool_opt.tool_opt, ".LL"));
    return ret;
}

// --- bzg.FToolOpt.regx_opt.Print
// Print back to string
void bzg::regx_opt_Print(bzg::FToolOpt& tool_opt, algo::cstring &out) {
    Regx_Print(tool_opt.regx_opt, out);
}

// --- bzg.FToolOpt.regx_target.Print
// Print back to string
void bzg::regx_target_Print(bzg::FToolOpt& tool_opt, algo::cstring &out) {
    Regx_Print(tool_opt.regx_target, out);
}

// --- bzg.FToolOpt..Init
// Set all fields to initial values.
void bzg::FToolOpt_Init(bzg::FToolOpt& tool_opt) {
    tool_opt.select = bool(false);
}

// --- bzg.FieldId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* bzg::value_ToCstr(const bzg::FieldId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case bzg_FieldId_value             : ret = "value";  break;
    }
    return ret;
}

// --- bzg.FieldId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void bzg::value_Print(const bzg::FieldId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- bzg.FieldId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool bzg::value_SetStrptrMaybe(bzg::FieldId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 5: {
            switch (u64(algo::ReadLE32(rhs.elems))|(u64(rhs[4])<<32)) {
                case LE_STR5('v','a','l','u','e'): {
                    value_SetEnum(parent,bzg_FieldId_value); ret = true; break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- bzg.FieldId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void bzg::value_SetStrptr(bzg::FieldId& parent, algo::strptr rhs, bzg_FieldIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- bzg.FieldId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool bzg::value_ReadStrptrMaybe(bzg::FieldId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- bzg.FieldId..ReadStrptrMaybe
// Read fields of bzg::FieldId from an ascii string.
// The format of the string is the format of the bzg::FieldId's only field
bool bzg::FieldId_ReadStrptrMaybe(bzg::FieldId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- bzg.FieldId..Print
// print string representation of ROW to string STR
// cfmt:bzg.FieldId.String  printfmt:Raw
void bzg::FieldId_Print(bzg::FieldId& row, algo::cstring& str) {
    bzg::value_Print(row, str);
}

// --- bzg.TableId.value.ToCstr
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
const char* bzg::value_ToCstr(const bzg::TableId& parent) {
    const char *ret = NULL;
    switch(value_GetEnum(parent)) {
        case bzg_TableId_dmmeta_Ns         : ret = "dmmeta.Ns";  break;
        case bzg_TableId_dev_Targdep       : ret = "dev.Targdep";  break;
        case bzg_TableId_dev_Targsrc       : ret = "dev.Targsrc";  break;
        case bzg_TableId_dev_Targsyslib    : ret = "dev.Targsyslib";  break;
        case bzg_TableId_dev_ToolOpt       : ret = "dev.ToolOpt";  break;
    }
    return ret;
}

// --- bzg.TableId.value.Print
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
void bzg::value_Print(const bzg::TableId& parent, algo::cstring &lhs) {
    const char *strval = value_ToCstr(parent);
    if (strval) {
        lhs << strval;
    } else {
        lhs << parent.value;
    }
}

// --- bzg.TableId.value.SetStrptrMaybe
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
bool bzg::value_SetStrptrMaybe(bzg::TableId& parent, algo::strptr rhs) {
    bool ret = false;
    switch (elems_N(rhs)) {
        case 9: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','m','m','e','t','a','.','N'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,bzg_TableId_dmmeta_Ns); ret = true; break; }
                    break;
                }
                case LE_STR8('d','m','m','e','t','a','.','n'): {
                    if (memcmp(rhs.elems+8,"s",1)==0) { value_SetEnum(parent,bzg_TableId_dmmeta_ns); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 11: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"dep",3)==0) { value_SetEnum(parent,bzg_TableId_dev_Targdep); ret = true; break; }
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,bzg_TableId_dev_Targsrc); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','T','o','o','l'): {
                    if (memcmp(rhs.elems+8,"Opt",3)==0) { value_SetEnum(parent,bzg_TableId_dev_ToolOpt); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"dep",3)==0) { value_SetEnum(parent,bzg_TableId_dev_targdep); ret = true; break; }
                    if (memcmp(rhs.elems+8,"src",3)==0) { value_SetEnum(parent,bzg_TableId_dev_targsrc); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 12: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','t','o','o','l'): {
                    if (memcmp(rhs.elems+8,"_opt",4)==0) { value_SetEnum(parent,bzg_TableId_dev_tool_opt); ret = true; break; }
                    break;
                }
            }
            break;
        }
        case 14: {
            switch (algo::ReadLE64(rhs.elems)) {
                case LE_STR8('d','e','v','.','T','a','r','g'): {
                    if (memcmp(rhs.elems+8,"syslib",6)==0) { value_SetEnum(parent,bzg_TableId_dev_Targsyslib); ret = true; break; }
                    break;
                }
                case LE_STR8('d','e','v','.','t','a','r','g'): {
                    if (memcmp(rhs.elems+8,"syslib",6)==0) { value_SetEnum(parent,bzg_TableId_dev_targsyslib); ret = true; break; }
                    break;
                }
            }
            break;
        }
    }
    return ret;
}

// --- bzg.TableId.value.SetStrptr
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
void bzg::value_SetStrptr(bzg::TableId& parent, algo::strptr rhs, bzg_TableIdEnum dflt) {
    if (!value_SetStrptrMaybe(parent,rhs)) value_SetEnum(parent,dflt);
}

// --- bzg.TableId.value.ReadStrptrMaybe
// Convert string to field. Return success value
bool bzg::value_ReadStrptrMaybe(bzg::TableId& parent, algo::strptr rhs) {
    bool retval = false;
    retval = value_SetStrptrMaybe(parent,rhs); // try symbol conversion
    if (!retval) { // didn't work? try reading as underlying type
        retval = i32_ReadStrptrMaybe(parent.value,rhs);
    }
    return retval;
}

// --- bzg.TableId..ReadStrptrMaybe
// Read fields of bzg::TableId from an ascii string.
// The format of the string is the format of the bzg::TableId's only field
bool bzg::TableId_ReadStrptrMaybe(bzg::TableId &parent, algo::strptr in_str) {
    bool retval = true;
    retval = retval && value_ReadStrptrMaybe(parent, in_str);
    return retval;
}

// --- bzg.TableId..Print
// print string representation of ROW to string STR
// cfmt:bzg.TableId.String  printfmt:Raw
void bzg::TableId_Print(bzg::TableId& row, algo::cstring& str) {
    bzg::value_Print(row, str);
}

// --- bzg...SizeCheck
inline static void bzg::SizeCheck() {
}

// --- bzg...StaticCheck
void bzg::StaticCheck() {
    algo_assert(_offset_of(bzg::FieldId, value) + sizeof(((bzg::FieldId*)0)->value) == sizeof(bzg::FieldId));
}

// --- bzg...main
int main(int argc, char **argv) {
    try {
        algo_lib::FDb_Init();
        lib_json::FDb_Init();
        bzg::FDb_Init();
        algo_lib::_db.argc = argc;
        algo_lib::_db.argv = argv;
        algo_lib::IohookInit();
        bzg::ReadArgv(); // dmmeta.main:bzg
        bzg::Main(); // user-defined main
    } catch(algo_lib::ErrorX &x) {
        prerr("bzg.error  " << x); // there may be additional hints in DetachBadTags
        algo_lib::_db.exit_code = 1;
    }
    if (algo_lib::_db.last_signal) {
        algo_lib::_db.exit_code = 1;
    }
    try {
        bzg::FDb_Uninit();
        lib_json::FDb_Uninit();
        algo_lib::FDb_Uninit();
    } catch(algo_lib::ErrorX &) {
        // don't print anything, might crash
        algo_lib::_db.exit_code = 1;
    }
    // only the lower 1 byte makes it to the outside world
    (void)i32_UpdateMin(algo_lib::_db.exit_code,255);
    return algo_lib::_db.exit_code;
}

// --- bzg...WinMain
#if defined(WIN32)
int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int) {
    return main(__argc,__argv);
}
#endif
