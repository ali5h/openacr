//
// include/gen/bzg_gen.inl.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.inl.h"
#include "include/gen/dmmeta_gen.inl.h"
#include "include/gen/algo_gen.inl.h"
#include "include/gen/dev_gen.inl.h"
//#pragma endinclude

// --- bzg.trace..Ctor
inline  bzg::trace::trace() {
}

// --- bzg.FDb.targsrc.EmptyQ
// Return true if index is empty
inline bool bzg::targsrc_EmptyQ() {
    return _db.targsrc_n == 0;
}

// --- bzg.FDb.targsrc.Find
// Look up row by row id. Return NULL if out of range
inline bzg::FTargsrc* bzg::targsrc_Find(u64 t) {
    bzg::FTargsrc *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.targsrc_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.targsrc_lary[bsr][index];
    }
    return retval;
}

// --- bzg.FDb.targsrc.Last
// Return pointer to last element of array, or NULL if array is empty
inline bzg::FTargsrc* bzg::targsrc_Last() {
    return targsrc_Find(u64(_db.targsrc_n-1));
}

// --- bzg.FDb.targsrc.N
// Return number of items in the pool
inline i32 bzg::targsrc_N() {
    return _db.targsrc_n;
}

// --- bzg.FDb.targsrc.qFind
// 'quick' Access row by row id. No bounds checking.
inline bzg::FTargsrc& bzg::targsrc_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.targsrc_lary[bsr][index];
}

// --- bzg.FDb.targdep.EmptyQ
// Return true if index is empty
inline bool bzg::targdep_EmptyQ() {
    return _db.targdep_n == 0;
}

// --- bzg.FDb.targdep.Find
// Look up row by row id. Return NULL if out of range
inline bzg::FTargdep* bzg::targdep_Find(u64 t) {
    bzg::FTargdep *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.targdep_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.targdep_lary[bsr][index];
    }
    return retval;
}

// --- bzg.FDb.targdep.Last
// Return pointer to last element of array, or NULL if array is empty
inline bzg::FTargdep* bzg::targdep_Last() {
    return targdep_Find(u64(_db.targdep_n-1));
}

// --- bzg.FDb.targdep.N
// Return number of items in the pool
inline i32 bzg::targdep_N() {
    return _db.targdep_n;
}

// --- bzg.FDb.targdep.qFind
// 'quick' Access row by row id. No bounds checking.
inline bzg::FTargdep& bzg::targdep_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.targdep_lary[bsr][index];
}

// --- bzg.FDb.tool_opt.EmptyQ
// Return true if index is empty
inline bool bzg::tool_opt_EmptyQ() {
    return _db.tool_opt_n == 0;
}

// --- bzg.FDb.tool_opt.Find
// Look up row by row id. Return NULL if out of range
inline bzg::FToolOpt* bzg::tool_opt_Find(u64 t) {
    bzg::FToolOpt *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.tool_opt_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.tool_opt_lary[bsr][index];
    }
    return retval;
}

// --- bzg.FDb.tool_opt.Last
// Return pointer to last element of array, or NULL if array is empty
inline bzg::FToolOpt* bzg::tool_opt_Last() {
    return tool_opt_Find(u64(_db.tool_opt_n-1));
}

// --- bzg.FDb.tool_opt.N
// Return number of items in the pool
inline i32 bzg::tool_opt_N() {
    return _db.tool_opt_n;
}

// --- bzg.FDb.tool_opt.qFind
// 'quick' Access row by row id. No bounds checking.
inline bzg::FToolOpt& bzg::tool_opt_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.tool_opt_lary[bsr][index];
}

// --- bzg.FDb.ns.EmptyQ
// Return true if index is empty
inline bool bzg::ns_EmptyQ() {
    return _db.ns_n == 0;
}

// --- bzg.FDb.ns.Find
// Look up row by row id. Return NULL if out of range
inline bzg::FNs* bzg::ns_Find(u64 t) {
    bzg::FNs *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.ns_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.ns_lary[bsr][index];
    }
    return retval;
}

// --- bzg.FDb.ns.Last
// Return pointer to last element of array, or NULL if array is empty
inline bzg::FNs* bzg::ns_Last() {
    return ns_Find(u64(_db.ns_n-1));
}

// --- bzg.FDb.ns.N
// Return number of items in the pool
inline i32 bzg::ns_N() {
    return _db.ns_n;
}

// --- bzg.FDb.ns.qFind
// 'quick' Access row by row id. No bounds checking.
inline bzg::FNs& bzg::ns_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.ns_lary[bsr][index];
}

// --- bzg.FDb.ind_ns.EmptyQ
// Return true if hash is empty
inline bool bzg::ind_ns_EmptyQ() {
    return _db.ind_ns_n == 0;
}

// --- bzg.FDb.ind_ns.N
// Return number of items in the hash
inline i32 bzg::ind_ns_N() {
    return _db.ind_ns_n;
}

// --- bzg.FDb.targsyslib.EmptyQ
// Return true if index is empty
inline bool bzg::targsyslib_EmptyQ() {
    return _db.targsyslib_n == 0;
}

// --- bzg.FDb.targsyslib.Find
// Look up row by row id. Return NULL if out of range
inline bzg::FTargsyslib* bzg::targsyslib_Find(u64 t) {
    bzg::FTargsyslib *retval = NULL;
    if (LIKELY(u64(t) < u64(_db.targsyslib_n))) {
        u64 x = t + 1;
        u64 bsr   = algo::u64_BitScanReverse(x);
        u64 base  = u64(1)<<bsr;
        u64 index = x-base;
        retval = &_db.targsyslib_lary[bsr][index];
    }
    return retval;
}

// --- bzg.FDb.targsyslib.Last
// Return pointer to last element of array, or NULL if array is empty
inline bzg::FTargsyslib* bzg::targsyslib_Last() {
    return targsyslib_Find(u64(_db.targsyslib_n-1));
}

// --- bzg.FDb.targsyslib.N
// Return number of items in the pool
inline i32 bzg::targsyslib_N() {
    return _db.targsyslib_n;
}

// --- bzg.FDb.targsyslib.qFind
// 'quick' Access row by row id. No bounds checking.
inline bzg::FTargsyslib& bzg::targsyslib_qFind(u64 t) {
    u64 x = t + 1;
    u64 bsr   = algo::u64_BitScanReverse(x);
    u64 base  = u64(1)<<bsr;
    u64 index = x-base;
    return _db.targsyslib_lary[bsr][index];
}

// --- bzg.FDb.targsrc_curs.Reset
// cursor points to valid item
inline void bzg::_db_targsrc_curs_Reset(_db_targsrc_curs &curs, bzg::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- bzg.FDb.targsrc_curs.ValidQ
// cursor points to valid item
inline bool bzg::_db_targsrc_curs_ValidQ(_db_targsrc_curs &curs) {
    return curs.index < _db.targsrc_n;
}

// --- bzg.FDb.targsrc_curs.Next
// proceed to next item
inline void bzg::_db_targsrc_curs_Next(_db_targsrc_curs &curs) {
    curs.index++;
}

// --- bzg.FDb.targsrc_curs.Access
// item access
inline bzg::FTargsrc& bzg::_db_targsrc_curs_Access(_db_targsrc_curs &curs) {
    return targsrc_qFind(u64(curs.index));
}

// --- bzg.FDb.targdep_curs.Reset
// cursor points to valid item
inline void bzg::_db_targdep_curs_Reset(_db_targdep_curs &curs, bzg::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- bzg.FDb.targdep_curs.ValidQ
// cursor points to valid item
inline bool bzg::_db_targdep_curs_ValidQ(_db_targdep_curs &curs) {
    return curs.index < _db.targdep_n;
}

// --- bzg.FDb.targdep_curs.Next
// proceed to next item
inline void bzg::_db_targdep_curs_Next(_db_targdep_curs &curs) {
    curs.index++;
}

// --- bzg.FDb.targdep_curs.Access
// item access
inline bzg::FTargdep& bzg::_db_targdep_curs_Access(_db_targdep_curs &curs) {
    return targdep_qFind(u64(curs.index));
}

// --- bzg.FDb.tool_opt_curs.Reset
// cursor points to valid item
inline void bzg::_db_tool_opt_curs_Reset(_db_tool_opt_curs &curs, bzg::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- bzg.FDb.tool_opt_curs.ValidQ
// cursor points to valid item
inline bool bzg::_db_tool_opt_curs_ValidQ(_db_tool_opt_curs &curs) {
    return curs.index < _db.tool_opt_n;
}

// --- bzg.FDb.tool_opt_curs.Next
// proceed to next item
inline void bzg::_db_tool_opt_curs_Next(_db_tool_opt_curs &curs) {
    curs.index++;
}

// --- bzg.FDb.tool_opt_curs.Access
// item access
inline bzg::FToolOpt& bzg::_db_tool_opt_curs_Access(_db_tool_opt_curs &curs) {
    return tool_opt_qFind(u64(curs.index));
}

// --- bzg.FDb.ns_curs.Reset
// cursor points to valid item
inline void bzg::_db_ns_curs_Reset(_db_ns_curs &curs, bzg::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- bzg.FDb.ns_curs.ValidQ
// cursor points to valid item
inline bool bzg::_db_ns_curs_ValidQ(_db_ns_curs &curs) {
    return curs.index < _db.ns_n;
}

// --- bzg.FDb.ns_curs.Next
// proceed to next item
inline void bzg::_db_ns_curs_Next(_db_ns_curs &curs) {
    curs.index++;
}

// --- bzg.FDb.ns_curs.Access
// item access
inline bzg::FNs& bzg::_db_ns_curs_Access(_db_ns_curs &curs) {
    return ns_qFind(u64(curs.index));
}

// --- bzg.FDb.targsyslib_curs.Reset
// cursor points to valid item
inline void bzg::_db_targsyslib_curs_Reset(_db_targsyslib_curs &curs, bzg::FDb &parent) {
    curs.parent = &parent;
    curs.index = 0;
}

// --- bzg.FDb.targsyslib_curs.ValidQ
// cursor points to valid item
inline bool bzg::_db_targsyslib_curs_ValidQ(_db_targsyslib_curs &curs) {
    return curs.index < _db.targsyslib_n;
}

// --- bzg.FDb.targsyslib_curs.Next
// proceed to next item
inline void bzg::_db_targsyslib_curs_Next(_db_targsyslib_curs &curs) {
    curs.index++;
}

// --- bzg.FDb.targsyslib_curs.Access
// item access
inline bzg::FTargsyslib& bzg::_db_targsyslib_curs_Access(_db_targsyslib_curs &curs) {
    return targsyslib_qFind(u64(curs.index));
}

// --- bzg.FNs.zd_targsrc.EmptyQ
// Return true if index is empty
inline bool bzg::zd_targsrc_EmptyQ(bzg::FNs& ns) {
    return ns.zd_targsrc_head == NULL;
}

// --- bzg.FNs.zd_targsrc.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline bzg::FTargsrc* bzg::zd_targsrc_First(bzg::FNs& ns) {
    bzg::FTargsrc *row = NULL;
    row = ns.zd_targsrc_head;
    return row;
}

// --- bzg.FNs.zd_targsrc.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool bzg::zd_targsrc_InLlistQ(bzg::FTargsrc& row) {
    bool result = false;
    result = !(row.zd_targsrc_next == (bzg::FTargsrc*)-1);
    return result;
}

// --- bzg.FNs.zd_targsrc.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline bzg::FTargsrc* bzg::zd_targsrc_Last(bzg::FNs& ns) {
    bzg::FTargsrc *row = NULL;
    row = ns.zd_targsrc_tail;
    return row;
}

// --- bzg.FNs.zd_targsrc.N
// Return number of items in the linked list
inline i32 bzg::zd_targsrc_N(const bzg::FNs& ns) {
    return ns.zd_targsrc_n;
}

// --- bzg.FNs.zd_targsrc.Next
// Return pointer to next element in the list
inline bzg::FTargsrc* bzg::zd_targsrc_Next(bzg::FTargsrc &row) {
    return row.zd_targsrc_next;
}

// --- bzg.FNs.zd_targsrc.Prev
// Return pointer to previous element in the list
inline bzg::FTargsrc* bzg::zd_targsrc_Prev(bzg::FTargsrc &row) {
    return row.zd_targsrc_prev;
}

// --- bzg.FNs.zd_targsrc.qLast
// Return reference to last element in the index. No bounds checking.
inline bzg::FTargsrc& bzg::zd_targsrc_qLast(bzg::FNs& ns) {
    bzg::FTargsrc *row = NULL;
    row = ns.zd_targsrc_tail;
    return *row;
}

// --- bzg.FNs.zd_targdep.EmptyQ
// Return true if index is empty
inline bool bzg::zd_targdep_EmptyQ(bzg::FNs& ns) {
    return ns.zd_targdep_head == NULL;
}

// --- bzg.FNs.zd_targdep.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline bzg::FTargdep* bzg::zd_targdep_First(bzg::FNs& ns) {
    bzg::FTargdep *row = NULL;
    row = ns.zd_targdep_head;
    return row;
}

// --- bzg.FNs.zd_targdep.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool bzg::zd_targdep_InLlistQ(bzg::FTargdep& row) {
    bool result = false;
    result = !(row.zd_targdep_next == (bzg::FTargdep*)-1);
    return result;
}

// --- bzg.FNs.zd_targdep.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline bzg::FTargdep* bzg::zd_targdep_Last(bzg::FNs& ns) {
    bzg::FTargdep *row = NULL;
    row = ns.zd_targdep_tail;
    return row;
}

// --- bzg.FNs.zd_targdep.N
// Return number of items in the linked list
inline i32 bzg::zd_targdep_N(const bzg::FNs& ns) {
    return ns.zd_targdep_n;
}

// --- bzg.FNs.zd_targdep.Next
// Return pointer to next element in the list
inline bzg::FTargdep* bzg::zd_targdep_Next(bzg::FTargdep &row) {
    return row.zd_targdep_next;
}

// --- bzg.FNs.zd_targdep.Prev
// Return pointer to previous element in the list
inline bzg::FTargdep* bzg::zd_targdep_Prev(bzg::FTargdep &row) {
    return row.zd_targdep_prev;
}

// --- bzg.FNs.zd_targdep.qLast
// Return reference to last element in the index. No bounds checking.
inline bzg::FTargdep& bzg::zd_targdep_qLast(bzg::FNs& ns) {
    bzg::FTargdep *row = NULL;
    row = ns.zd_targdep_tail;
    return *row;
}

// --- bzg.FNs.zd_targsyslib.EmptyQ
// Return true if index is empty
inline bool bzg::zd_targsyslib_EmptyQ(bzg::FNs& ns) {
    return ns.zd_targsyslib_head == NULL;
}

// --- bzg.FNs.zd_targsyslib.First
// If index empty, return NULL. Otherwise return pointer to first element in index
inline bzg::FTargsyslib* bzg::zd_targsyslib_First(bzg::FNs& ns) {
    bzg::FTargsyslib *row = NULL;
    row = ns.zd_targsyslib_head;
    return row;
}

// --- bzg.FNs.zd_targsyslib.InLlistQ
// Return true if row is in the linked list, false otherwise
inline bool bzg::zd_targsyslib_InLlistQ(bzg::FTargsyslib& row) {
    bool result = false;
    result = !(row.zd_targsyslib_next == (bzg::FTargsyslib*)-1);
    return result;
}

// --- bzg.FNs.zd_targsyslib.Last
// If index empty, return NULL. Otherwise return pointer to last element in index
inline bzg::FTargsyslib* bzg::zd_targsyslib_Last(bzg::FNs& ns) {
    bzg::FTargsyslib *row = NULL;
    row = ns.zd_targsyslib_tail;
    return row;
}

// --- bzg.FNs.zd_targsyslib.N
// Return number of items in the linked list
inline i32 bzg::zd_targsyslib_N(const bzg::FNs& ns) {
    return ns.zd_targsyslib_n;
}

// --- bzg.FNs.zd_targsyslib.Next
// Return pointer to next element in the list
inline bzg::FTargsyslib* bzg::zd_targsyslib_Next(bzg::FTargsyslib &row) {
    return row.zd_targsyslib_next;
}

// --- bzg.FNs.zd_targsyslib.Prev
// Return pointer to previous element in the list
inline bzg::FTargsyslib* bzg::zd_targsyslib_Prev(bzg::FTargsyslib &row) {
    return row.zd_targsyslib_prev;
}

// --- bzg.FNs.zd_targsyslib.qLast
// Return reference to last element in the index. No bounds checking.
inline bzg::FTargsyslib& bzg::zd_targsyslib_qLast(bzg::FNs& ns) {
    bzg::FTargsyslib *row = NULL;
    row = ns.zd_targsyslib_tail;
    return *row;
}

// --- bzg.FNs..Init
// Set all fields to initial values.
inline void bzg::FNs_Init(bzg::FNs& ns) {
    ns.zd_targsrc_head = NULL; // (bzg.FNs.zd_targsrc)
    ns.zd_targsrc_n = 0; // (bzg.FNs.zd_targsrc)
    ns.zd_targsrc_tail = NULL; // (bzg.FNs.zd_targsrc)
    ns.zd_targdep_head = NULL; // (bzg.FNs.zd_targdep)
    ns.zd_targdep_n = 0; // (bzg.FNs.zd_targdep)
    ns.zd_targdep_tail = NULL; // (bzg.FNs.zd_targdep)
    ns.zd_targsyslib_head = NULL; // (bzg.FNs.zd_targsyslib)
    ns.zd_targsyslib_n = 0; // (bzg.FNs.zd_targsyslib)
    ns.zd_targsyslib_tail = NULL; // (bzg.FNs.zd_targsyslib)
    ns.ind_ns_next = (bzg::FNs*)-1; // (bzg.FDb.ind_ns) not-in-hash
}

// --- bzg.FNs.zd_targsrc_curs.Reset
// cursor points to valid item
inline void bzg::ns_zd_targsrc_curs_Reset(ns_zd_targsrc_curs &curs, bzg::FNs &parent) {
    curs.row = parent.zd_targsrc_head;
}

// --- bzg.FNs.zd_targsrc_curs.ValidQ
// cursor points to valid item
inline bool bzg::ns_zd_targsrc_curs_ValidQ(ns_zd_targsrc_curs &curs) {
    return curs.row != NULL;
}

// --- bzg.FNs.zd_targsrc_curs.Next
// proceed to next item
inline void bzg::ns_zd_targsrc_curs_Next(ns_zd_targsrc_curs &curs) {
    bzg::FTargsrc *next = (*curs.row).zd_targsrc_next;
    curs.row = next;
}

// --- bzg.FNs.zd_targsrc_curs.Access
// item access
inline bzg::FTargsrc& bzg::ns_zd_targsrc_curs_Access(ns_zd_targsrc_curs &curs) {
    return *curs.row;
}

// --- bzg.FNs.zd_targdep_curs.Reset
// cursor points to valid item
inline void bzg::ns_zd_targdep_curs_Reset(ns_zd_targdep_curs &curs, bzg::FNs &parent) {
    curs.row = parent.zd_targdep_head;
}

// --- bzg.FNs.zd_targdep_curs.ValidQ
// cursor points to valid item
inline bool bzg::ns_zd_targdep_curs_ValidQ(ns_zd_targdep_curs &curs) {
    return curs.row != NULL;
}

// --- bzg.FNs.zd_targdep_curs.Next
// proceed to next item
inline void bzg::ns_zd_targdep_curs_Next(ns_zd_targdep_curs &curs) {
    bzg::FTargdep *next = (*curs.row).zd_targdep_next;
    curs.row = next;
}

// --- bzg.FNs.zd_targdep_curs.Access
// item access
inline bzg::FTargdep& bzg::ns_zd_targdep_curs_Access(ns_zd_targdep_curs &curs) {
    return *curs.row;
}

// --- bzg.FNs.zd_targsyslib_curs.Reset
// cursor points to valid item
inline void bzg::ns_zd_targsyslib_curs_Reset(ns_zd_targsyslib_curs &curs, bzg::FNs &parent) {
    curs.row = parent.zd_targsyslib_head;
}

// --- bzg.FNs.zd_targsyslib_curs.ValidQ
// cursor points to valid item
inline bool bzg::ns_zd_targsyslib_curs_ValidQ(ns_zd_targsyslib_curs &curs) {
    return curs.row != NULL;
}

// --- bzg.FNs.zd_targsyslib_curs.Next
// proceed to next item
inline void bzg::ns_zd_targsyslib_curs_Next(ns_zd_targsyslib_curs &curs) {
    bzg::FTargsyslib *next = (*curs.row).zd_targsyslib_next;
    curs.row = next;
}

// --- bzg.FNs.zd_targsyslib_curs.Access
// item access
inline bzg::FTargsyslib& bzg::ns_zd_targsyslib_curs_Access(ns_zd_targsyslib_curs &curs) {
    return *curs.row;
}

// --- bzg.FNs..Ctor
inline  bzg::FNs::FNs() {
    bzg::FNs_Init(*this);
}

// --- bzg.FNs..Dtor
inline  bzg::FNs::~FNs() {
    bzg::FNs_Uninit(*this);
}

// --- bzg.FTargdep..Init
// Set all fields to initial values.
inline void bzg::FTargdep_Init(bzg::FTargdep& targdep) {
    targdep.zd_targdep_next = (bzg::FTargdep*)-1; // (bzg.FNs.zd_targdep) not-in-list
    targdep.zd_targdep_prev = NULL; // (bzg.FNs.zd_targdep)
}

// --- bzg.FTargdep..Ctor
inline  bzg::FTargdep::FTargdep() {
    bzg::FTargdep_Init(*this);
}

// --- bzg.FTargdep..Dtor
inline  bzg::FTargdep::~FTargdep() {
    bzg::FTargdep_Uninit(*this);
}

// --- bzg.FTargsrc..Init
// Set all fields to initial values.
inline void bzg::FTargsrc_Init(bzg::FTargsrc& targsrc) {
    targsrc.zd_targsrc_next = (bzg::FTargsrc*)-1; // (bzg.FNs.zd_targsrc) not-in-list
    targsrc.zd_targsrc_prev = NULL; // (bzg.FNs.zd_targsrc)
}

// --- bzg.FTargsrc..Ctor
inline  bzg::FTargsrc::FTargsrc() {
    bzg::FTargsrc_Init(*this);
}

// --- bzg.FTargsrc..Dtor
inline  bzg::FTargsrc::~FTargsrc() {
    bzg::FTargsrc_Uninit(*this);
}

// --- bzg.FTargsyslib..Init
// Set all fields to initial values.
inline void bzg::FTargsyslib_Init(bzg::FTargsyslib& targsyslib) {
    targsyslib.p_ns = NULL;
    targsyslib.zd_targsyslib_next = (bzg::FTargsyslib*)-1; // (bzg.FNs.zd_targsyslib) not-in-list
    targsyslib.zd_targsyslib_prev = NULL; // (bzg.FNs.zd_targsyslib)
}

// --- bzg.FTargsyslib..Ctor
inline  bzg::FTargsyslib::FTargsyslib() {
    bzg::FTargsyslib_Init(*this);
}

// --- bzg.FTargsyslib..Dtor
inline  bzg::FTargsyslib::~FTargsyslib() {
    bzg::FTargsyslib_Uninit(*this);
}

// --- bzg.FToolOpt..Ctor
inline  bzg::FToolOpt::FToolOpt() {
    bzg::FToolOpt_Init(*this);
}

// --- bzg.FieldId.value.GetEnum
// Get value of field as enum type
inline bzg_FieldIdEnum bzg::value_GetEnum(const bzg::FieldId& parent) {
    return bzg_FieldIdEnum(parent.value);
}

// --- bzg.FieldId.value.SetEnum
// Set value of field from enum type.
inline void bzg::value_SetEnum(bzg::FieldId& parent, bzg_FieldIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- bzg.FieldId.value.Cast
inline  bzg::FieldId::operator bzg_FieldIdEnum() const {
    return bzg_FieldIdEnum((*this).value);
}

// --- bzg.FieldId..Init
// Set all fields to initial values.
inline void bzg::FieldId_Init(bzg::FieldId& parent) {
    parent.value = i32(-1);
}

// --- bzg.FieldId..Ctor
inline  bzg::FieldId::FieldId() {
    bzg::FieldId_Init(*this);
}

// --- bzg.FieldId..FieldwiseCtor
inline  bzg::FieldId::FieldId(i32 in_value)
    : value(in_value)
 {
}

// --- bzg.FieldId..EnumCtor
inline  bzg::FieldId::FieldId(bzg_FieldIdEnum arg) {
    this->value = i32(arg);
}

// --- bzg.TableId.value.GetEnum
// Get value of field as enum type
inline bzg_TableIdEnum bzg::value_GetEnum(const bzg::TableId& parent) {
    return bzg_TableIdEnum(parent.value);
}

// --- bzg.TableId.value.SetEnum
// Set value of field from enum type.
inline void bzg::value_SetEnum(bzg::TableId& parent, bzg_TableIdEnum rhs) {
    parent.value = i32(rhs);
}

// --- bzg.TableId.value.Cast
inline  bzg::TableId::operator bzg_TableIdEnum() const {
    return bzg_TableIdEnum((*this).value);
}

// --- bzg.TableId..Init
// Set all fields to initial values.
inline void bzg::TableId_Init(bzg::TableId& parent) {
    parent.value = i32(-1);
}

// --- bzg.TableId..Ctor
inline  bzg::TableId::TableId() {
    bzg::TableId_Init(*this);
}

// --- bzg.TableId..FieldwiseCtor
inline  bzg::TableId::TableId(i32 in_value)
    : value(in_value)
 {
}

// --- bzg.TableId..EnumCtor
inline  bzg::TableId::TableId(bzg_TableIdEnum arg) {
    this->value = i32(arg);
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const bzg::trace &row) {// cfmt:bzg.trace.String
    bzg::trace_Print(const_cast<bzg::trace&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const bzg::FieldId &row) {// cfmt:bzg.FieldId.String
    bzg::FieldId_Print(const_cast<bzg::FieldId&>(row), str);
    return str;
}

inline algo::cstring &algo::operator <<(algo::cstring &str, const bzg::TableId &row) {// cfmt:bzg.TableId.String
    bzg::TableId_Print(const_cast<bzg::TableId&>(row), str);
    return str;
}
