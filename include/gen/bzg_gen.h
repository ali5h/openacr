//
// include/gen/bzg_gen.h
// Generated by AMC
//
// Copyright (C) 2008-2013 AlgoEngineering LLC
// Copyright (C) 2013-2019 NYSE | Intercontinental Exchange
// Copyright (C) 2020-2023 Astra
// Copyright (C) 2023 AlgoRND
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//


#pragma once
#include "include/gen/command_gen.h"
#include "include/gen/dmmeta_gen.h"
#include "include/gen/algo_gen.h"
#include "include/gen/dev_gen.h"
//#pragma endinclude
// gen:ns_enums

// --- bzg_FieldIdEnum

enum bzg_FieldIdEnum {        // bzg.FieldId.value
     bzg_FieldId_value   = 0
};

enum { bzg_FieldIdEnum_N = 1 };


// --- bzg_TableIdEnum

enum bzg_TableIdEnum {                  // bzg.TableId.value
     bzg_TableId_dmmeta_Ns        = 0   // dmmeta.Ns -> bzg.FNs
    ,bzg_TableId_dmmeta_ns        = 0   // dmmeta.ns -> bzg.FNs
    ,bzg_TableId_dev_Targdep      = 1   // dev.Targdep -> bzg.FTargdep
    ,bzg_TableId_dev_targdep      = 1   // dev.targdep -> bzg.FTargdep
    ,bzg_TableId_dev_Targsrc      = 2   // dev.Targsrc -> bzg.FTargsrc
    ,bzg_TableId_dev_targsrc      = 2   // dev.targsrc -> bzg.FTargsrc
    ,bzg_TableId_dev_Targsyslib   = 3   // dev.Targsyslib -> bzg.FTargsyslib
    ,bzg_TableId_dev_targsyslib   = 3   // dev.targsyslib -> bzg.FTargsyslib
    ,bzg_TableId_dev_ToolOpt      = 4   // dev.ToolOpt -> bzg.FToolOpt
    ,bzg_TableId_dev_tool_opt     = 4   // dev.tool_opt -> bzg.FToolOpt
};

enum { bzg_TableIdEnum_N = 10 };

namespace bzg { // gen:ns_pkeytypedef
} // gen:ns_pkeytypedef
namespace bzg { // gen:ns_tclass_field
extern const char *bzg_help;
} // gen:ns_tclass_field
// gen:ns_fwddecl2
namespace dmmeta { struct Ns; }
namespace dev { struct Targdep; }
namespace dev { struct Targsrc; }
namespace dev { struct Targsyslib; }
namespace bzg { struct FNs; }
namespace dev { struct ToolOpt; }
namespace bzg { struct _db_targsrc_curs; }
namespace bzg { struct _db_targdep_curs; }
namespace bzg { struct _db_tool_opt_curs; }
namespace bzg { struct _db_ns_curs; }
namespace bzg { struct _db_targsyslib_curs; }
namespace bzg { struct ns_zd_targsrc_curs; }
namespace bzg { struct ns_zd_targdep_curs; }
namespace bzg { struct ns_zd_targsyslib_curs; }
namespace bzg { struct trace; }
namespace bzg { struct FDb; }
namespace bzg { struct FTargdep; }
namespace bzg { struct FTargsrc; }
namespace bzg { struct FTargsyslib; }
namespace bzg { struct FToolOpt; }
namespace bzg { struct FieldId; }
namespace bzg { struct TableId; }
namespace bzg { extern struct bzg::FDb _db; }
namespace bzg { // gen:ns_gsymbol
    extern const dev::OptTypePkey dev_opt_type_AR; // "AR"
    extern const dev::OptTypePkey dev_opt_type_C; // "C"
    extern const dev::OptTypePkey dev_opt_type_CC; // "CC"
    extern const dev::OptTypePkey dev_opt_type_CPP; // "CPP"
    extern const dev::OptTypePkey dev_opt_type_HPP; // "HPP"
    extern const dev::OptTypePkey dev_opt_type_IGNOREME; // "IGNOREME"
    extern const dev::OptTypePkey dev_opt_type_LINK; // "LINK"
    extern const dev::OptTypePkey dev_opt_type_RC; // "RC"
} // gen:ns_gsymbol
namespace bzg { // gen:ns_gsymbol
    extern const dev::UnamePkey dev_uname_; // ""
    extern const dev::UnamePkey dev_uname_Darwin; // "Darwin"
    extern const dev::UnamePkey dev_uname_FreeBSD; // "FreeBSD"
    extern const dev::UnamePkey dev_uname_Linux; // "Linux"
    extern const dev::UnamePkey dev_uname_SunOS; // "SunOS"
} // gen:ns_gsymbol
namespace bzg { // gen:ns_print_struct

// --- bzg.trace
#pragma pack(push,1)
struct trace { // bzg.trace
    // func:bzg.trace..Ctor
    inline               trace() __attribute__((nothrow));
};
#pragma pack(pop)

// print string representation of ROW to string STR
// cfmt:bzg.trace.String  printfmt:Tuple
// func:bzg.trace..Print
void                 trace_Print(bzg::trace& row, algo::cstring& str) __attribute__((nothrow));

// --- bzg.FDb
// create: bzg.FDb._db (Global)
struct FDb { // bzg.FDb
    command::bzg        cmdline;                //
    bzg::FTargsrc*      targsrc_lary[32];       // level array
    i32                 targsrc_n;              // number of elements in array
    bzg::FTargdep*      targdep_lary[32];       // level array
    i32                 targdep_n;              // number of elements in array
    bzg::FToolOpt*      tool_opt_lary[32];      // level array
    i32                 tool_opt_n;             // number of elements in array
    bzg::FNs*           ns_lary[32];            // level array
    i32                 ns_n;                   // number of elements in array
    bzg::FNs**          ind_ns_buckets_elems;   // pointer to bucket array
    i32                 ind_ns_buckets_n;       // number of elements in bucket array
    i32                 ind_ns_n;               // number of elements in the hash table
    bzg::FTargsyslib*   targsyslib_lary[32];    // level array
    i32                 targsyslib_n;           // number of elements in array
    bzg::trace          trace;                  //
};

// Read argc,argv directly into the fields of the command line(s)
// The following fields are updated:
//     bzg.FDb.cmdline
//     algo_lib.FDb.cmdline
// func:bzg.FDb._db.ReadArgv
void                 ReadArgv() __attribute__((nothrow));
// Main loop.
// func:bzg.FDb._db.MainLoop
void                 MainLoop();
// Main step
// func:bzg.FDb._db.Step
void                 Step();
// Main function
// func:bzg.FDb._db.Main
// this function is 'extrn' and implemented by user
void                 Main();
// Parse strptr into known type and add to database.
// Return value is true unless an error occurs. If return value is false, algo_lib::_db.errtext has error text
// func:bzg.FDb._db.InsertStrptrMaybe
bool                 InsertStrptrMaybe(algo::strptr str);
// Load all finputs from given directory.
// func:bzg.FDb._db.LoadTuplesMaybe
bool                 LoadTuplesMaybe(algo::strptr root, bool recursive) __attribute__((nothrow));
// Load all finputs from given file.
// Read tuples from file FNAME into this namespace's in-memory database.
// If RECURSIVE is TRUE, then also load these tuples into any parent namespaces
// It a file referred to by FNAME is missing, no error is reported (it's considered an empty set).
// Function returns TRUE if all records were parsed and inserted without error.
// If the function returns FALSE, use algo_lib::DetachBadTags() for error description
// func:bzg.FDb._db.LoadTuplesFile
bool                 LoadTuplesFile(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load all finputs from given file descriptor.
// func:bzg.FDb._db.LoadTuplesFd
bool                 LoadTuplesFd(algo::Fildes fd, algo::strptr fname, bool recursive) __attribute__((nothrow));
// Load specified ssimfile.
// func:bzg.FDb._db.LoadSsimfileMaybe
bool                 LoadSsimfileMaybe(algo::strptr fname, bool recursive) __attribute__((nothrow));
// Calls Step function of dependencies
// func:bzg.FDb._db.Steps
void                 Steps();
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:bzg.FDb._db.XrefMaybe
bool                 _db_XrefMaybe();

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:bzg.FDb.targsrc.Alloc
bzg::FTargsrc&       targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:bzg.FDb.targsrc.AllocMaybe
bzg::FTargsrc*       targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:bzg.FDb.targsrc.InsertMaybe
bzg::FTargsrc*       targsrc_InsertMaybe(const dev::Targsrc &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:bzg.FDb.targsrc.AllocMem
void*                targsrc_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:bzg.FDb.targsrc.EmptyQ
inline bool          targsrc_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:bzg.FDb.targsrc.Find
inline bzg::FTargsrc* targsrc_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:bzg.FDb.targsrc.Last
inline bzg::FTargsrc* targsrc_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:bzg.FDb.targsrc.N
inline i32           targsrc_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:bzg.FDb.targsrc.RemoveAll
void                 targsrc_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:bzg.FDb.targsrc.RemoveLast
void                 targsrc_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:bzg.FDb.targsrc.qFind
inline bzg::FTargsrc& targsrc_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:bzg.FDb.targsrc.XrefMaybe
bool                 targsrc_XrefMaybe(bzg::FTargsrc &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:bzg.FDb.targdep.Alloc
bzg::FTargdep&       targdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:bzg.FDb.targdep.AllocMaybe
bzg::FTargdep*       targdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:bzg.FDb.targdep.InsertMaybe
bzg::FTargdep*       targdep_InsertMaybe(const dev::Targdep &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:bzg.FDb.targdep.AllocMem
void*                targdep_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:bzg.FDb.targdep.EmptyQ
inline bool          targdep_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:bzg.FDb.targdep.Find
inline bzg::FTargdep* targdep_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:bzg.FDb.targdep.Last
inline bzg::FTargdep* targdep_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:bzg.FDb.targdep.N
inline i32           targdep_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:bzg.FDb.targdep.RemoveAll
void                 targdep_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:bzg.FDb.targdep.RemoveLast
void                 targdep_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:bzg.FDb.targdep.qFind
inline bzg::FTargdep& targdep_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:bzg.FDb.targdep.XrefMaybe
bool                 targdep_XrefMaybe(bzg::FTargdep &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:bzg.FDb.tool_opt.Alloc
bzg::FToolOpt&       tool_opt_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:bzg.FDb.tool_opt.AllocMaybe
bzg::FToolOpt*       tool_opt_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:bzg.FDb.tool_opt.InsertMaybe
bzg::FToolOpt*       tool_opt_InsertMaybe(const dev::ToolOpt &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:bzg.FDb.tool_opt.AllocMem
void*                tool_opt_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:bzg.FDb.tool_opt.EmptyQ
inline bool          tool_opt_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:bzg.FDb.tool_opt.Find
inline bzg::FToolOpt* tool_opt_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:bzg.FDb.tool_opt.Last
inline bzg::FToolOpt* tool_opt_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:bzg.FDb.tool_opt.N
inline i32           tool_opt_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:bzg.FDb.tool_opt.RemoveAll
void                 tool_opt_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:bzg.FDb.tool_opt.RemoveLast
void                 tool_opt_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:bzg.FDb.tool_opt.qFind
inline bzg::FToolOpt& tool_opt_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:bzg.FDb.tool_opt.XrefMaybe
bool                 tool_opt_XrefMaybe(bzg::FToolOpt &row);

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:bzg.FDb.ns.Alloc
bzg::FNs&            ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:bzg.FDb.ns.AllocMaybe
bzg::FNs*            ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:bzg.FDb.ns.InsertMaybe
bzg::FNs*            ns_InsertMaybe(const dmmeta::Ns &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:bzg.FDb.ns.AllocMem
void*                ns_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:bzg.FDb.ns.EmptyQ
inline bool          ns_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:bzg.FDb.ns.Find
inline bzg::FNs*     ns_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:bzg.FDb.ns.Last
inline bzg::FNs*     ns_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:bzg.FDb.ns.N
inline i32           ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:bzg.FDb.ns.RemoveAll
void                 ns_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:bzg.FDb.ns.RemoveLast
void                 ns_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:bzg.FDb.ns.qFind
inline bzg::FNs&     ns_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:bzg.FDb.ns.XrefMaybe
bool                 ns_XrefMaybe(bzg::FNs &row);

// Return true if hash is empty
// func:bzg.FDb.ind_ns.EmptyQ
inline bool          ind_ns_EmptyQ() __attribute__((nothrow));
// Find row by key. Return NULL if not found.
// func:bzg.FDb.ind_ns.Find
bzg::FNs*            ind_ns_Find(const algo::strptr& key) __attribute__((__warn_unused_result__, nothrow));
// Look up row by key and return reference. Throw exception if not found
// func:bzg.FDb.ind_ns.FindX
bzg::FNs&            ind_ns_FindX(const algo::strptr& key);
// Find row by key. If not found, create and x-reference a new row with with this key.
// func:bzg.FDb.ind_ns.GetOrCreate
bzg::FNs&            ind_ns_GetOrCreate(const algo::strptr& key) __attribute__((nothrow));
// Return number of items in the hash
// func:bzg.FDb.ind_ns.N
inline i32           ind_ns_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Insert row into hash table. Return true if row is reachable through the hash after the function completes.
// func:bzg.FDb.ind_ns.InsertMaybe
bool                 ind_ns_InsertMaybe(bzg::FNs& row) __attribute__((nothrow));
// Remove reference to element from hash index. If element is not in hash, do nothing
// func:bzg.FDb.ind_ns.Remove
void                 ind_ns_Remove(bzg::FNs& row) __attribute__((nothrow));
// Reserve enough room in the hash for N more elements. Return success code.
// func:bzg.FDb.ind_ns.Reserve
void                 ind_ns_Reserve(int n) __attribute__((nothrow));

// Allocate memory for new default row.
// If out of memory, process is killed.
// func:bzg.FDb.targsyslib.Alloc
bzg::FTargsyslib&    targsyslib_Alloc() __attribute__((__warn_unused_result__, nothrow));
// Allocate memory for new element. If out of memory, return NULL.
// func:bzg.FDb.targsyslib.AllocMaybe
bzg::FTargsyslib*    targsyslib_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
// Create new row from struct.
// Return pointer to new element, or NULL if insertion failed (due to out-of-memory, duplicate key, etc)
// func:bzg.FDb.targsyslib.InsertMaybe
bzg::FTargsyslib*    targsyslib_InsertMaybe(const dev::Targsyslib &value) __attribute__((nothrow));
// Allocate space for one element. If no memory available, return NULL.
// func:bzg.FDb.targsyslib.AllocMem
void*                targsyslib_AllocMem() __attribute__((__warn_unused_result__, nothrow));
// Return true if index is empty
// func:bzg.FDb.targsyslib.EmptyQ
inline bool          targsyslib_EmptyQ() __attribute__((nothrow, pure));
// Look up row by row id. Return NULL if out of range
// func:bzg.FDb.targsyslib.Find
inline bzg::FTargsyslib* targsyslib_Find(u64 t) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to last element of array, or NULL if array is empty
// func:bzg.FDb.targsyslib.Last
inline bzg::FTargsyslib* targsyslib_Last() __attribute__((nothrow, pure));
// Return number of items in the pool
// func:bzg.FDb.targsyslib.N
inline i32           targsyslib_N() __attribute__((__warn_unused_result__, nothrow, pure));
// Remove all elements from Lary
// func:bzg.FDb.targsyslib.RemoveAll
void                 targsyslib_RemoveAll() __attribute__((nothrow));
// Delete last element of array. Do nothing if array is empty.
// func:bzg.FDb.targsyslib.RemoveLast
void                 targsyslib_RemoveLast() __attribute__((nothrow));
// 'quick' Access row by row id. No bounds checking.
// func:bzg.FDb.targsyslib.qFind
inline bzg::FTargsyslib& targsyslib_qFind(u64 t) __attribute__((nothrow, pure));
// Insert row into all appropriate indices. If error occurs, store error
// in algo_lib::_db.errtext and return false. Caller must Delete or Unref such row.
// func:bzg.FDb.targsyslib.XrefMaybe
bool                 targsyslib_XrefMaybe(bzg::FTargsyslib &row);

// cursor points to valid item
// func:bzg.FDb.targsrc_curs.Reset
inline void          _db_targsrc_curs_Reset(_db_targsrc_curs &curs, bzg::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.targsrc_curs.ValidQ
inline bool          _db_targsrc_curs_ValidQ(_db_targsrc_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FDb.targsrc_curs.Next
inline void          _db_targsrc_curs_Next(_db_targsrc_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FDb.targsrc_curs.Access
inline bzg::FTargsrc& _db_targsrc_curs_Access(_db_targsrc_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.targdep_curs.Reset
inline void          _db_targdep_curs_Reset(_db_targdep_curs &curs, bzg::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.targdep_curs.ValidQ
inline bool          _db_targdep_curs_ValidQ(_db_targdep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FDb.targdep_curs.Next
inline void          _db_targdep_curs_Next(_db_targdep_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FDb.targdep_curs.Access
inline bzg::FTargdep& _db_targdep_curs_Access(_db_targdep_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.tool_opt_curs.Reset
inline void          _db_tool_opt_curs_Reset(_db_tool_opt_curs &curs, bzg::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.tool_opt_curs.ValidQ
inline bool          _db_tool_opt_curs_ValidQ(_db_tool_opt_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FDb.tool_opt_curs.Next
inline void          _db_tool_opt_curs_Next(_db_tool_opt_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FDb.tool_opt_curs.Access
inline bzg::FToolOpt& _db_tool_opt_curs_Access(_db_tool_opt_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.ns_curs.Reset
inline void          _db_ns_curs_Reset(_db_ns_curs &curs, bzg::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.ns_curs.ValidQ
inline bool          _db_ns_curs_ValidQ(_db_ns_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FDb.ns_curs.Next
inline void          _db_ns_curs_Next(_db_ns_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FDb.ns_curs.Access
inline bzg::FNs&     _db_ns_curs_Access(_db_ns_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.targsyslib_curs.Reset
inline void          _db_targsyslib_curs_Reset(_db_targsyslib_curs &curs, bzg::FDb &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FDb.targsyslib_curs.ValidQ
inline bool          _db_targsyslib_curs_ValidQ(_db_targsyslib_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FDb.targsyslib_curs.Next
inline void          _db_targsyslib_curs_Next(_db_targsyslib_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FDb.targsyslib_curs.Access
inline bzg::FTargsyslib& _db_targsyslib_curs_Access(_db_targsyslib_curs &curs) __attribute__((nothrow));
// Set all fields to initial values.
// func:bzg.FDb..Init
void                 FDb_Init();
// func:bzg.FDb..Uninit
void                 FDb_Uninit() __attribute__((nothrow));

// --- bzg.FNs
// create: bzg.FDb.ns (Lary)
// global access: ns (Lary, by rowid)
// global access: ind_ns (Thash, hash field ns)
// access: bzg.FTargsyslib.p_ns (Upptr)
struct FNs { // bzg.FNs
    bzg::FNs*           ind_ns_next;          // hash next
    algo::Smallstr16    ns;                   // Namespace name (primary key)
    algo::Smallstr50    nstype;               // Namespace type
    algo::Smallstr50    license;              // Associated license
    algo::Comment       comment;              //
    bzg::FTargsrc*      zd_targsrc_head;      // zero-terminated doubly linked list
    i32                 zd_targsrc_n;         // zero-terminated doubly linked list
    bzg::FTargsrc*      zd_targsrc_tail;      // pointer to last element
    bzg::FTargdep*      zd_targdep_head;      // zero-terminated doubly linked list
    i32                 zd_targdep_n;         // zero-terminated doubly linked list
    bzg::FTargdep*      zd_targdep_tail;      // pointer to last element
    bzg::FTargsyslib*   zd_targsyslib_head;   // zero-terminated doubly linked list
    i32                 zd_targsyslib_n;      // zero-terminated doubly linked list
    bzg::FTargsyslib*   zd_targsyslib_tail;   // pointer to last element
    // reftype Llist of bzg.FNs.zd_targsrc prohibits copy
    // reftype Llist of bzg.FNs.zd_targdep prohibits copy
    // reftype Llist of bzg.FNs.zd_targsyslib prohibits copy
    // func:bzg.FNs..AssignOp
    inline bzg::FNs&     operator =(const bzg::FNs &rhs) = delete;
    // reftype Llist of bzg.FNs.zd_targsrc prohibits copy
    // reftype Llist of bzg.FNs.zd_targdep prohibits copy
    // reftype Llist of bzg.FNs.zd_targsyslib prohibits copy
    // func:bzg.FNs..CopyCtor
    inline               FNs(const bzg::FNs &rhs) = delete;
private:
    // func:bzg.FNs..Ctor
    inline               FNs() __attribute__((nothrow));
    // func:bzg.FNs..Dtor
    inline               ~FNs() __attribute__((nothrow));
    friend bzg::FNs&            ns_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend bzg::FNs*            ns_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 ns_RemoveAll() __attribute__((nothrow));
    friend void                 ns_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:bzg.FNs.base.CopyOut
void                 ns_CopyOut(bzg::FNs &row, dmmeta::Ns &out) __attribute__((nothrow));
// Copy fields in to row
// func:bzg.FNs.base.CopyIn
void                 ns_CopyIn(bzg::FNs &row, dmmeta::Ns &in) __attribute__((nothrow));

// Return true if index is empty
// func:bzg.FNs.zd_targsrc.EmptyQ
inline bool          zd_targsrc_EmptyQ(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:bzg.FNs.zd_targsrc.First
inline bzg::FTargsrc* zd_targsrc_First(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:bzg.FNs.zd_targsrc.InLlistQ
inline bool          zd_targsrc_InLlistQ(bzg::FTargsrc& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:bzg.FNs.zd_targsrc.Insert
void                 zd_targsrc_Insert(bzg::FNs& ns, bzg::FTargsrc& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:bzg.FNs.zd_targsrc.Last
inline bzg::FTargsrc* zd_targsrc_Last(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:bzg.FNs.zd_targsrc.N
inline i32           zd_targsrc_N(const bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:bzg.FNs.zd_targsrc.Next
inline bzg::FTargsrc* zd_targsrc_Next(bzg::FTargsrc &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:bzg.FNs.zd_targsrc.Prev
inline bzg::FTargsrc* zd_targsrc_Prev(bzg::FTargsrc &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:bzg.FNs.zd_targsrc.Remove
void                 zd_targsrc_Remove(bzg::FNs& ns, bzg::FTargsrc& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:bzg.FNs.zd_targsrc.RemoveAll
void                 zd_targsrc_RemoveAll(bzg::FNs& ns) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:bzg.FNs.zd_targsrc.RemoveFirst
bzg::FTargsrc*       zd_targsrc_RemoveFirst(bzg::FNs& ns) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:bzg.FNs.zd_targsrc.qLast
inline bzg::FTargsrc& zd_targsrc_qLast(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:bzg.FNs.zd_targdep.EmptyQ
inline bool          zd_targdep_EmptyQ(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:bzg.FNs.zd_targdep.First
inline bzg::FTargdep* zd_targdep_First(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:bzg.FNs.zd_targdep.InLlistQ
inline bool          zd_targdep_InLlistQ(bzg::FTargdep& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:bzg.FNs.zd_targdep.Insert
void                 zd_targdep_Insert(bzg::FNs& ns, bzg::FTargdep& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:bzg.FNs.zd_targdep.Last
inline bzg::FTargdep* zd_targdep_Last(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:bzg.FNs.zd_targdep.N
inline i32           zd_targdep_N(const bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:bzg.FNs.zd_targdep.Next
inline bzg::FTargdep* zd_targdep_Next(bzg::FTargdep &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:bzg.FNs.zd_targdep.Prev
inline bzg::FTargdep* zd_targdep_Prev(bzg::FTargdep &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:bzg.FNs.zd_targdep.Remove
void                 zd_targdep_Remove(bzg::FNs& ns, bzg::FTargdep& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:bzg.FNs.zd_targdep.RemoveAll
void                 zd_targdep_RemoveAll(bzg::FNs& ns) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:bzg.FNs.zd_targdep.RemoveFirst
bzg::FTargdep*       zd_targdep_RemoveFirst(bzg::FNs& ns) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:bzg.FNs.zd_targdep.qLast
inline bzg::FTargdep& zd_targdep_qLast(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow));

// Return true if index is empty
// func:bzg.FNs.zd_targsyslib.EmptyQ
inline bool          zd_targsyslib_EmptyQ(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// If index empty, return NULL. Otherwise return pointer to first element in index
// func:bzg.FNs.zd_targsyslib.First
inline bzg::FTargsyslib* zd_targsyslib_First(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return true if row is in the linked list, false otherwise
// func:bzg.FNs.zd_targsyslib.InLlistQ
inline bool          zd_targsyslib_InLlistQ(bzg::FTargsyslib& row) __attribute__((__warn_unused_result__, nothrow));
// Insert row into linked list. If row is already in linked list, do nothing.
// func:bzg.FNs.zd_targsyslib.Insert
void                 zd_targsyslib_Insert(bzg::FNs& ns, bzg::FTargsyslib& row) __attribute__((nothrow));
// If index empty, return NULL. Otherwise return pointer to last element in index
// func:bzg.FNs.zd_targsyslib.Last
inline bzg::FTargsyslib* zd_targsyslib_Last(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return number of items in the linked list
// func:bzg.FNs.zd_targsyslib.N
inline i32           zd_targsyslib_N(const bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow, pure));
// Return pointer to next element in the list
// func:bzg.FNs.zd_targsyslib.Next
inline bzg::FTargsyslib* zd_targsyslib_Next(bzg::FTargsyslib &row) __attribute__((__warn_unused_result__, nothrow));
// Return pointer to previous element in the list
// func:bzg.FNs.zd_targsyslib.Prev
inline bzg::FTargsyslib* zd_targsyslib_Prev(bzg::FTargsyslib &row) __attribute__((__warn_unused_result__, nothrow));
// Remove element from index. If element is not in index, do nothing.
// func:bzg.FNs.zd_targsyslib.Remove
void                 zd_targsyslib_Remove(bzg::FNs& ns, bzg::FTargsyslib& row) __attribute__((nothrow));
// Empty the index. (The rows are not deleted)
// func:bzg.FNs.zd_targsyslib.RemoveAll
void                 zd_targsyslib_RemoveAll(bzg::FNs& ns) __attribute__((nothrow));
// If linked list is empty, return NULL. Otherwise unlink and return pointer to first element.
// func:bzg.FNs.zd_targsyslib.RemoveFirst
bzg::FTargsyslib*    zd_targsyslib_RemoveFirst(bzg::FNs& ns) __attribute__((nothrow));
// Return reference to last element in the index. No bounds checking.
// func:bzg.FNs.zd_targsyslib.qLast
inline bzg::FTargsyslib& zd_targsyslib_qLast(bzg::FNs& ns) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:bzg.FNs..Init
inline void          FNs_Init(bzg::FNs& ns);
// cursor points to valid item
// func:bzg.FNs.zd_targsrc_curs.Reset
inline void          ns_zd_targsrc_curs_Reset(ns_zd_targsrc_curs &curs, bzg::FNs &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FNs.zd_targsrc_curs.ValidQ
inline bool          ns_zd_targsrc_curs_ValidQ(ns_zd_targsrc_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FNs.zd_targsrc_curs.Next
inline void          ns_zd_targsrc_curs_Next(ns_zd_targsrc_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FNs.zd_targsrc_curs.Access
inline bzg::FTargsrc& ns_zd_targsrc_curs_Access(ns_zd_targsrc_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FNs.zd_targdep_curs.Reset
inline void          ns_zd_targdep_curs_Reset(ns_zd_targdep_curs &curs, bzg::FNs &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FNs.zd_targdep_curs.ValidQ
inline bool          ns_zd_targdep_curs_ValidQ(ns_zd_targdep_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FNs.zd_targdep_curs.Next
inline void          ns_zd_targdep_curs_Next(ns_zd_targdep_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FNs.zd_targdep_curs.Access
inline bzg::FTargdep& ns_zd_targdep_curs_Access(ns_zd_targdep_curs &curs) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FNs.zd_targsyslib_curs.Reset
inline void          ns_zd_targsyslib_curs_Reset(ns_zd_targsyslib_curs &curs, bzg::FNs &parent) __attribute__((nothrow));
// cursor points to valid item
// func:bzg.FNs.zd_targsyslib_curs.ValidQ
inline bool          ns_zd_targsyslib_curs_ValidQ(ns_zd_targsyslib_curs &curs) __attribute__((nothrow));
// proceed to next item
// func:bzg.FNs.zd_targsyslib_curs.Next
inline void          ns_zd_targsyslib_curs_Next(ns_zd_targsyslib_curs &curs) __attribute__((nothrow));
// item access
// func:bzg.FNs.zd_targsyslib_curs.Access
inline bzg::FTargsyslib& ns_zd_targsyslib_curs_Access(ns_zd_targsyslib_curs &curs) __attribute__((nothrow));
// func:bzg.FNs..Uninit
void                 FNs_Uninit(bzg::FNs& ns) __attribute__((nothrow));

// --- bzg.FTargdep
// create: bzg.FDb.targdep (Lary)
// global access: targdep (Lary, by rowid)
// access: bzg.FNs.zd_targdep (Llist)
struct FTargdep { // bzg.FTargdep
    bzg::FTargdep*     zd_targdep_next;   // zslist link; -1 means not-in-list
    bzg::FTargdep*     zd_targdep_prev;   // previous element
    algo::Smallstr50   targdep;           // Primary key - target.parent
    algo::Comment      comment;           //
    // func:bzg.FTargdep..AssignOp
    inline bzg::FTargdep& operator =(const bzg::FTargdep &rhs) = delete;
    // func:bzg.FTargdep..CopyCtor
    inline               FTargdep(const bzg::FTargdep &rhs) = delete;
private:
    // func:bzg.FTargdep..Ctor
    inline               FTargdep() __attribute__((nothrow));
    // func:bzg.FTargdep..Dtor
    inline               ~FTargdep() __attribute__((nothrow));
    friend bzg::FTargdep&       targdep_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend bzg::FTargdep*       targdep_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 targdep_RemoveAll() __attribute__((nothrow));
    friend void                 targdep_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:bzg.FTargdep.base.CopyOut
void                 targdep_CopyOut(bzg::FTargdep &row, dev::Targdep &out) __attribute__((nothrow));
// Copy fields in to row
// func:bzg.FTargdep.base.CopyIn
void                 targdep_CopyIn(bzg::FTargdep &row, dev::Targdep &in) __attribute__((nothrow));

// func:bzg.FTargdep.target.Get
algo::Smallstr16     target_Get(bzg::FTargdep& targdep) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FTargdep.parent.Get
algo::Smallstr16     parent_Get(bzg::FTargdep& targdep) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:bzg.FTargdep..Init
inline void          FTargdep_Init(bzg::FTargdep& targdep);
// func:bzg.FTargdep..Uninit
void                 FTargdep_Uninit(bzg::FTargdep& targdep) __attribute__((nothrow));

// --- bzg.FTargsrc
// create: bzg.FDb.targsrc (Lary)
// global access: targsrc (Lary, by rowid)
// access: bzg.FNs.zd_targsrc (Llist)
struct FTargsrc { // bzg.FTargsrc
    bzg::FTargsrc*      zd_targsrc_next;   // zslist link; -1 means not-in-list
    bzg::FTargsrc*      zd_targsrc_prev;   // previous element
    algo::Smallstr100   targsrc;           //
    algo::Comment       comment;           //
    // func:bzg.FTargsrc..AssignOp
    inline bzg::FTargsrc& operator =(const bzg::FTargsrc &rhs) = delete;
    // func:bzg.FTargsrc..CopyCtor
    inline               FTargsrc(const bzg::FTargsrc &rhs) = delete;
private:
    // func:bzg.FTargsrc..Ctor
    inline               FTargsrc() __attribute__((nothrow));
    // func:bzg.FTargsrc..Dtor
    inline               ~FTargsrc() __attribute__((nothrow));
    friend bzg::FTargsrc&       targsrc_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend bzg::FTargsrc*       targsrc_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 targsrc_RemoveAll() __attribute__((nothrow));
    friend void                 targsrc_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:bzg.FTargsrc.base.CopyOut
void                 targsrc_CopyOut(bzg::FTargsrc &row, dev::Targsrc &out) __attribute__((nothrow));
// Copy fields in to row
// func:bzg.FTargsrc.base.CopyIn
void                 targsrc_CopyIn(bzg::FTargsrc &row, dev::Targsrc &in) __attribute__((nothrow));

// func:bzg.FTargsrc.target.Get
algo::Smallstr16     target_Get(bzg::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FTargsrc.src.Get
algo::Smallstr200    src_Get(bzg::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FTargsrc.ext.Get
algo::Smallstr10     ext_Get(bzg::FTargsrc& targsrc) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:bzg.FTargsrc..Init
inline void          FTargsrc_Init(bzg::FTargsrc& targsrc);
// func:bzg.FTargsrc..Uninit
void                 FTargsrc_Uninit(bzg::FTargsrc& targsrc) __attribute__((nothrow));

// --- bzg.FTargsyslib
// create: bzg.FDb.targsyslib (Lary)
// global access: targsyslib (Lary, by rowid)
// access: bzg.FNs.zd_targsyslib (Llist)
struct FTargsyslib { // bzg.FTargsyslib
    bzg::FTargsyslib*   zd_targsyslib_next;   // zslist link; -1 means not-in-list
    bzg::FTargsyslib*   zd_targsyslib_prev;   // previous element
    algo::Smallstr50    targsyslib;           //
    algo::Comment       comment;              //
    bzg::FNs*           p_ns;                 // reference to parent row
    // x-reference on bzg.FTargsyslib.p_ns prevents copy
    // func:bzg.FTargsyslib..AssignOp
    inline bzg::FTargsyslib& operator =(const bzg::FTargsyslib &rhs) = delete;
    // x-reference on bzg.FTargsyslib.p_ns prevents copy
    // func:bzg.FTargsyslib..CopyCtor
    inline               FTargsyslib(const bzg::FTargsyslib &rhs) = delete;
private:
    // func:bzg.FTargsyslib..Ctor
    inline               FTargsyslib() __attribute__((nothrow));
    // func:bzg.FTargsyslib..Dtor
    inline               ~FTargsyslib() __attribute__((nothrow));
    friend bzg::FTargsyslib&    targsyslib_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend bzg::FTargsyslib*    targsyslib_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 targsyslib_RemoveAll() __attribute__((nothrow));
    friend void                 targsyslib_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:bzg.FTargsyslib.base.CopyOut
void                 targsyslib_CopyOut(bzg::FTargsyslib &row, dev::Targsyslib &out) __attribute__((nothrow));
// Copy fields in to row
// func:bzg.FTargsyslib.base.CopyIn
void                 targsyslib_CopyIn(bzg::FTargsyslib &row, dev::Targsyslib &in) __attribute__((nothrow));

// func:bzg.FTargsyslib.target.Get
algo::Smallstr16     target_Get(bzg::FTargsyslib& targsyslib) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FTargsyslib.syslib.Get
algo::Smallstr50     syslib_Get(bzg::FTargsyslib& targsyslib) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FTargsyslib.uname.Get
algo::Smallstr50     uname_Get(bzg::FTargsyslib& targsyslib) __attribute__((__warn_unused_result__, nothrow));

// Set all fields to initial values.
// func:bzg.FTargsyslib..Init
inline void          FTargsyslib_Init(bzg::FTargsyslib& targsyslib);
// func:bzg.FTargsyslib..Uninit
void                 FTargsyslib_Uninit(bzg::FTargsyslib& targsyslib) __attribute__((nothrow));

// --- bzg.FToolOpt
// create: bzg.FDb.tool_opt (Lary)
// global access: tool_opt (Lary, by rowid)
struct FToolOpt { // bzg.FToolOpt
    algo::Smallstr100   tool_opt;      // Primary key - uname.compiler-cfg.arch/target-opt_type:opt
    algo::Comment       comment;       //
    algo_lib::Regx      regx_opt;      // Sql Regx
    algo_lib::Regx      regx_target;   // Sql Regx
    bool                select;        //   false
private:
    // func:bzg.FToolOpt..Ctor
    inline               FToolOpt() __attribute__((nothrow));
    friend bzg::FToolOpt&       tool_opt_Alloc() __attribute__((__warn_unused_result__, nothrow));
    friend bzg::FToolOpt*       tool_opt_AllocMaybe() __attribute__((__warn_unused_result__, nothrow));
    friend void                 tool_opt_RemoveAll() __attribute__((nothrow));
    friend void                 tool_opt_RemoveLast() __attribute__((nothrow));
};

// Copy fields out of row
// func:bzg.FToolOpt.base.CopyOut
void                 tool_opt_CopyOut(bzg::FToolOpt &row, dev::ToolOpt &out) __attribute__((nothrow));
// Copy fields in to row
// func:bzg.FToolOpt.base.CopyIn
void                 tool_opt_CopyIn(bzg::FToolOpt &row, dev::ToolOpt &in) __attribute__((nothrow));

// func:bzg.FToolOpt.uname.Get
algo::Smallstr50     uname_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FToolOpt.compiler.Get
algo::Smallstr50     compiler_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FToolOpt.cfg.Get
algo::Smallstr50     cfg_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FToolOpt.arch.Get
algo::Smallstr50     arch_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FToolOpt.target.Get
algo::Smallstr50     target_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FToolOpt.opt_type.Get
algo::Smallstr50     opt_type_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FToolOpt.opt.Get
algo::Smallstr100    opt_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// func:bzg.FToolOpt.sortfld.Get
algo::Smallstr50     sortfld_Get(bzg::FToolOpt& tool_opt) __attribute__((__warn_unused_result__, nothrow));

// Print back to string
// func:bzg.FToolOpt.regx_opt.Print
void                 regx_opt_Print(bzg::FToolOpt& tool_opt, algo::cstring &out) __attribute__((nothrow));

// Print back to string
// func:bzg.FToolOpt.regx_target.Print
void                 regx_target_Print(bzg::FToolOpt& tool_opt, algo::cstring &out) __attribute__((nothrow));

// Set all fields to initial values.
// func:bzg.FToolOpt..Init
void                 FToolOpt_Init(bzg::FToolOpt& tool_opt);

// --- bzg.FieldId
#pragma pack(push,1)
struct FieldId { // bzg.FieldId: Field read helper
    i32   value;   //   -1
    // func:bzg.FieldId.value.Cast
    inline               operator bzg_FieldIdEnum() const __attribute__((nothrow));
    // func:bzg.FieldId..Ctor
    inline               FieldId() __attribute__((nothrow));
    // func:bzg.FieldId..FieldwiseCtor
    explicit inline               FieldId(i32 in_value) __attribute__((nothrow));
    // func:bzg.FieldId..EnumCtor
    inline               FieldId(bzg_FieldIdEnum arg) __attribute__((nothrow));
};
#pragma pack(pop)

// Get value of field as enum type
// func:bzg.FieldId.value.GetEnum
inline bzg_FieldIdEnum value_GetEnum(const bzg::FieldId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:bzg.FieldId.value.SetEnum
inline void          value_SetEnum(bzg::FieldId& parent, bzg_FieldIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:bzg.FieldId.value.ToCstr
const char*          value_ToCstr(const bzg::FieldId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:bzg.FieldId.value.Print
void                 value_Print(const bzg::FieldId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:bzg.FieldId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(bzg::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:bzg.FieldId.value.SetStrptr
void                 value_SetStrptr(bzg::FieldId& parent, algo::strptr rhs, bzg_FieldIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:bzg.FieldId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(bzg::FieldId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of bzg::FieldId from an ascii string.
// The format of the string is the format of the bzg::FieldId's only field
// func:bzg.FieldId..ReadStrptrMaybe
bool                 FieldId_ReadStrptrMaybe(bzg::FieldId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:bzg.FieldId..Init
inline void          FieldId_Init(bzg::FieldId& parent);
// print string representation of ROW to string STR
// cfmt:bzg.FieldId.String  printfmt:Raw
// func:bzg.FieldId..Print
void                 FieldId_Print(bzg::FieldId& row, algo::cstring& str) __attribute__((nothrow));

// --- bzg.TableId
struct TableId { // bzg.TableId: Index of table in this namespace
    i32   value;   //   -1  index of table
    // func:bzg.TableId.value.Cast
    inline               operator bzg_TableIdEnum() const __attribute__((nothrow));
    // func:bzg.TableId..Ctor
    inline               TableId() __attribute__((nothrow));
    // func:bzg.TableId..FieldwiseCtor
    explicit inline               TableId(i32 in_value) __attribute__((nothrow));
    // func:bzg.TableId..EnumCtor
    inline               TableId(bzg_TableIdEnum arg) __attribute__((nothrow));
};

// Get value of field as enum type
// func:bzg.TableId.value.GetEnum
inline bzg_TableIdEnum value_GetEnum(const bzg::TableId& parent) __attribute__((nothrow));
// Set value of field from enum type.
// func:bzg.TableId.value.SetEnum
inline void          value_SetEnum(bzg::TableId& parent, bzg_TableIdEnum rhs) __attribute__((nothrow));
// Convert numeric value of field to one of predefined string constants.
// If string is found, return a static C string. Otherwise, return NULL.
// func:bzg.TableId.value.ToCstr
const char*          value_ToCstr(const bzg::TableId& parent) __attribute__((nothrow));
// Convert value to a string. First, attempt conversion to a known string.
// If no string matches, print value as a numeric value.
// func:bzg.TableId.value.Print
void                 value_Print(const bzg::TableId& parent, algo::cstring &lhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, do not modify field and return false.
// In case of success, return true
// func:bzg.TableId.value.SetStrptrMaybe
bool                 value_SetStrptrMaybe(bzg::TableId& parent, algo::strptr rhs) __attribute__((nothrow));
// Convert string to field.
// If the string is invalid, set numeric value to DFLT
// func:bzg.TableId.value.SetStrptr
void                 value_SetStrptr(bzg::TableId& parent, algo::strptr rhs, bzg_TableIdEnum dflt) __attribute__((nothrow));
// Convert string to field. Return success value
// func:bzg.TableId.value.ReadStrptrMaybe
bool                 value_ReadStrptrMaybe(bzg::TableId& parent, algo::strptr rhs) __attribute__((nothrow));

// Read fields of bzg::TableId from an ascii string.
// The format of the string is the format of the bzg::TableId's only field
// func:bzg.TableId..ReadStrptrMaybe
bool                 TableId_ReadStrptrMaybe(bzg::TableId &parent, algo::strptr in_str) __attribute__((nothrow));
// Set all fields to initial values.
// func:bzg.TableId..Init
inline void          TableId_Init(bzg::TableId& parent);
// print string representation of ROW to string STR
// cfmt:bzg.TableId.String  printfmt:Raw
// func:bzg.TableId..Print
void                 TableId_Print(bzg::TableId& row, algo::cstring& str) __attribute__((nothrow));
} // gen:ns_print_struct
namespace bzg { // gen:ns_curstext

struct _db_targsrc_curs {// cursor
    typedef bzg::FTargsrc ChildType;
    bzg::FDb *parent;
    i64 index;
    _db_targsrc_curs(){ parent=NULL; index=0; }
};


struct _db_targdep_curs {// cursor
    typedef bzg::FTargdep ChildType;
    bzg::FDb *parent;
    i64 index;
    _db_targdep_curs(){ parent=NULL; index=0; }
};


struct _db_tool_opt_curs {// cursor
    typedef bzg::FToolOpt ChildType;
    bzg::FDb *parent;
    i64 index;
    _db_tool_opt_curs(){ parent=NULL; index=0; }
};


struct _db_ns_curs {// cursor
    typedef bzg::FNs ChildType;
    bzg::FDb *parent;
    i64 index;
    _db_ns_curs(){ parent=NULL; index=0; }
};


struct _db_targsyslib_curs {// cursor
    typedef bzg::FTargsyslib ChildType;
    bzg::FDb *parent;
    i64 index;
    _db_targsyslib_curs(){ parent=NULL; index=0; }
};


struct ns_zd_targsrc_curs {// fcurs:bzg.FNs.zd_targsrc/curs
    typedef bzg::FTargsrc ChildType;
    bzg::FTargsrc* row;
    ns_zd_targsrc_curs() {
        row = NULL;
    }
};


struct ns_zd_targdep_curs {// fcurs:bzg.FNs.zd_targdep/curs
    typedef bzg::FTargdep ChildType;
    bzg::FTargdep* row;
    ns_zd_targdep_curs() {
        row = NULL;
    }
};


struct ns_zd_targsyslib_curs {// fcurs:bzg.FNs.zd_targsyslib/curs
    typedef bzg::FTargsyslib ChildType;
    bzg::FTargsyslib* row;
    ns_zd_targsyslib_curs() {
        row = NULL;
    }
};

} // gen:ns_curstext
namespace bzg { // gen:ns_func
// func:bzg...StaticCheck
void                 StaticCheck();
} // gen:ns_func
// func:bzg...main
int                  main(int argc, char **argv);
#if defined(WIN32)
// func:bzg...WinMain
int WINAPI           WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
#endif
// gen:ns_operators
namespace algo {
inline algo::cstring &operator <<(algo::cstring &str, const bzg::trace &row);// cfmt:bzg.trace.String
inline algo::cstring &operator <<(algo::cstring &str, const bzg::FieldId &row);// cfmt:bzg.FieldId.String
inline algo::cstring &operator <<(algo::cstring &str, const bzg::TableId &row);// cfmt:bzg.TableId.String
}
